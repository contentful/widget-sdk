version: 2.1
orbs:
  cypress: cypress-io/cypress@1.5.1
  deploy-assets:
    executors:
      machine-executor:
        machine:
          docker_layer_caching: true
    commands:
      deploy-to-s3:
        description: "Deploy configured assets to S3 using the image containing awscli"
        parameters:
          access_key_id:
            type: string
          secret_access_key:
            type: string
          region:
            type: string
          path:
            type: string
          bucket:
            type: string
        steps:
          - run:
              name: Deploy assets to S3
              command: |
                docker run -t --rm -v ~/workspace/output:/app/output \
                -e AWS_REGION=<<parameters.region>> \
                -e AWS_ACCESS_KEY_ID=<<parameters.access_key_id>> \
                -e AWS_SECRET_ACCESS_KEY=<<parameters.secret_access_key>> \
                aws s3 cp --acl public-read --recursive \
                <<parameters.path>> s3://<<parameters.bucket>>
    jobs:
      to-s3:
        description: "Build the image containing awscli and deploy assets to S3 using it"
        parameters:
          access_key_id:
            type: string
          secret_access_key:
            type: string
          region:
            type: string
          path:
            type: string
          bucket:
            type: string
        executor: machine-executor
        steps:
          - attach_workspace:
              at: ~/workspace
          - checkout
          - run: docker build -t aws -f Dockerfile-awscli .
          - deploy-to-s3:
              access_key_id: <<parameters.access_key_id>>
              secret_access_key: <<parameters.secret_access_key>>
              region: <<parameters.region>>
              path: <<parameters.path>>
              bucket: <<parameters.bucket>>


jobs:
  build-ci-image:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run: mkdir ./docker
      - run:
          name: Build CI image
          command: |
            docker build --file Dockerfile-ci \
            --tag contentful/user-interface-ci \
            --build-arg "NPM_TOKEN=${NPM_TOKEN}" \
            --build-arg "SSH_KEY=${SSH_KEY-$(cat ~/.ssh/id_rsa)}" .
      - run: bin/docker-run-ci configure-file-dist --branch "${CIRCLE_BRANCH}" --version "${CIRCLE_SHA1}"
      - run:
          name: Save CI image
          command: |
            docker save contentful/user-interface-ci | gzip -c > ./docker/user-interface-ci.tar.gz
      - persist_to_workspace:
          root: .
          paths:
            - docker
            - output

  push-image-to-docker-repo:
    machine:
      docker_layer_caching: true
    environment:
      DOCKER_REGISTRY: 806120774687.dkr.ecr.us-east-1.amazonaws.com
      DOCKER_IMAGE: contentful/user_interface
    steps:
      - attach_workspace:
          at: ~/workspace
      - checkout
      - run: cp -r ~/workspace/output ./output
      - run: docker build -t $DOCKER_IMAGE -f Dockerfile-prod --build-arg CF_VERSION="${CIRCLE_SHA1}" .
      - run:
          name: Push image to our docker repo
          command: |
            curl -fsSLO https://contentful-lab-assets.s3.amazonaws.com/estivador && chmod +x estivador
            echo "$(curl -sSL https://contentful-lab-assets.s3.amazonaws.com/estivador.sum)" | sha512sum -c
            ./estivador docker-ecr-login
            ./estivador put-image
      - run:
          name: Trigger jenkins E2E tests
          command: bin/trigger-jenkins

  deploy-micro-backends:
    machine:
      docker_layer_caching: true
    steps:
      - checkout
      - run:
          name: Deploy micro-backends
          command: |
            MICRO_BACKENDS_VERSION="$(cat package-lock.json | jq '.dependencies["@contentful/micro-backends"].version' --raw-output)"
            echo "Using @contentful/micro-backends@$MICRO_BACKENDS_VERSION"
            cd micro-backends
            docker build -t micro-backends-deployment --build-arg NPM_TOKEN --build-arg MICRO_BACKENDS_VERSION .
            docker run -t --rm -v "$(pwd):/micro-backends" \
            -e LOG="yesplease" \
            -e AWS_REGION="$MICRO_BACKENDS_AWS_REGION" \
            -e AWS_ACCESS_KEY_ID="$MICRO_BACKENDS_AWS_ACCESS_KEY_ID" \
            -e AWS_SECRET_ACCESS_KEY="$MICRO_BACKENDS_AWS_SECRET_ACCESS_KEY" \
            micro-backends-deployment \
            ./node_modules/.bin/micro-backends "micro-backends" "rev-$CIRCLE_SHA1"

  lint:
    docker:
      - image: circleci/node:8.12.0
    environment:
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run: npm ci
      - run: tools/bin/validate-config.js config/*.json
      - run: npm run hint

  run-jest-tests:
    docker:
      - image: circleci/node:8.12.0
    environment:
      CI: true
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run: npm ci
      - run: NODE_ENV=production npm run jest:coverage # cant set NODE_ENV in environment above since jest is a dev dep
      - run: npm run codecov

  run-karma-tests:
    docker:
      - image: circleci/node:8.12.0-browsers
    environment:
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run: npm ci
      - run: NODE_ENV=production node --max_old_space_size=3072 ./node_modules/.bin/gulp build
      - run: NODE_ENV=production npm run test:once

workflows:
  build:
    jobs:
      - build-ci-image
      - lint
      - run-jest-tests
      - run-karma-tests
      - deploy-assets/to-s3:
          name: deploy-assets-to-preview
          access_key_id: "${AWS_S3_PREVIEW_ACCESS_KEY_ID}"
          secret_access_key: "${AWS_S3_PREVIEW_SECRET_ACCESS_KEY}"
          region: "eu-west-1"
          path: "/app/output/files/preview"
          bucket: "cf-preview-static-cdnorigin"
          requires:
            - build-ci-image
      - deploy-assets/to-s3:
          name: deploy-assets-to-staging
          access_key_id: "${AWS_S3_STAGING_ACCESS_KEY_ID}"
          secret_access_key: "${AWS_S3_STAGING_SECRET_ACCESS_KEY}"
          region: "us-east-1"
          path: "/app/output/files/staging"
          bucket: "cf-staging-static-cdnorigin"
          post-steps:
            - run:
                name: Trigger Jenkins Staging Dependent Tests
                command: bin/trigger-jenkins-dependent
          requires:
            - build-ci-image
      - deploy-assets/to-s3:
          name: deploy-assets-to-prod
          access_key_id: "${AWS_S3_PRODUCTION_ACCESS_KEY_ID}"
          secret_access_key: "${AWS_S3_PRODUCTION_SECRET_ACCESS_KEY}"
          region: "us-east-1"
          path: "/app/output/files/production"
          bucket: "static.cdnorigin.contentful.com"
          requires:
            - build-ci-image
      - deploy-micro-backends
      - push-image-to-docker-repo:
          requires:
            - build-ci-image
      - cypress/run:
          name: cypress-run
          executor: cypress/base-8
          pre-steps:
            - run: 'echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc'
          store_artifacts: true

notify:
  webhooks:
    - url: https://samson.contentful.org/integrations/circleci/24884e787b5439c88cedef3d8bf1ca90
