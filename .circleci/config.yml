version: 2.1

orbs:
  cypress: cypress-io/cypress@1.7.0
  copy-assets:
    orbs:
      aws-s3: circleci/aws-s3@1.0.15
    jobs:
      to-s3:
        description: 'Build the image containing awscli and deploy assets to S3 using it'
        docker:
          - image: cimg/python:3.6
        steps:
          - attach_workspace:
              at: ~/workspace
          - checkout
          - run:
              name: Export preview AWS environment variables
              command: |
                echo 'export AWS_ACCESS_KEY_ID=${AWS_S3_PREVIEW_ACCESS_KEY_ID}' >> $BASH_ENV
                echo 'export AWS_SECRET_ACCESS_KEY=${AWS_S3_PREVIEW_SECRET_ACCESS_KEY}' >> $BASH_ENV
                echo 'export AWS_REGION="eu-west-1"' >> $BASH_ENV
          - aws-s3/copy:
              from: ~/workspace/output/files/preview/app
              to: s3://cf-preview-static-cdnorigin/app
              arguments: --acl public-read --recursive --cache-control "immutable,public,max-age=86400"
          - aws-s3/copy:
              from: ~/workspace/output/files/preview/archive
              to: s3://cf-preview-static-cdnorigin/archive
              arguments: --acl public-read --recursive --cache-control "no-cache"
          - run:
              name: Export staging AWS environment variables
              command: |
                echo 'export AWS_ACCESS_KEY_ID=${AWS_S3_STAGING_ACCESS_KEY_ID}' >> $BASH_ENV
                echo 'export AWS_SECRET_ACCESS_KEY=${AWS_S3_STAGING_SECRET_ACCESS_KEY}' >> $BASH_ENV
                echo 'export AWS_REGION="eu-west-1"' >> $BASH_ENV
          - aws-s3/copy:
              from: ~/workspace/output/files/staging/app
              to: s3://cf-staging-static-cdnorigin/app
              arguments: --acl public-read --recursive --cache-control "immutable,public,max-age=86400"
          - aws-s3/copy:
              from: ~/workspace/output/files/staging/archive
              to: s3://cf-staging-static-cdnorigin/archive
              arguments: --acl public-read --recursive --cache-control "no-cache"
          - run:
              name: Export staging AWS environment variables
              command: |
                echo 'export AWS_ACCESS_KEY_ID=${AWS_S3_PRODUCTION_ACCESS_KEY_ID}' >> $BASH_ENV
                echo 'export AWS_SECRET_ACCESS_KEY=${AWS_S3_PRODUCTION_SECRET_ACCESS_KEY}' >> $BASH_ENV
                echo 'export AWS_REGION="eu-west-1"' >> $BASH_ENV
          - aws-s3/copy:
              from: ~/workspace/output/files/production/app
              to: s3://static.cdnorigin.contentful.com/app
              arguments: --acl public-read --recursive --cache-control "immutable,public,max-age=86400"
          - aws-s3/copy:
              from: ~/workspace/output/files/production/archive
              to: s3://static.cdnorigin.contentful.com/archive
              arguments: --acl public-read --recursive --cache-control "no-cache"

  post-comment:
    commands:
      deployment:
        description: 'Post deployment URLs to PR'
        parameters:
          env:
            type: string
            description: 'quirely or flinkly'
        steps:
          - run:
              name: 'Post deployment URL to GitHub'
              command: |
                export PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/'  -f7)
                export LAMBDA_URL="https://tooling-lambdas.ctfl.now.sh/user_interface/comments"
                curl -i -X POST \
                --data-binary "{\"issue\": ${PR_NUMBER:-\"\"}, \"branch\": \"${CIRCLE_BRANCH}\", \"commitSha\": \"${CIRCLE_SHA1}\", \"env\": \"<<parameters.env>>\"}" \
                -H 'content-type: application/json' \
                $LAMBDA_URL?token=$GITHUB_PAT_REPO_SCOPE_SQUIRELY || echo "Comment won't be posted to ${PR_NUMBER:-$CIRCLE_BRANCH}. Continuing anyway."

  estivador:
    commands:
      install:
        description: 'Download estivador and validate checksum'
        steps:
          - run:
              name: Install estivador
              working_directory: ~/bin
              command: |
                curl -fsSLO https://contentful-lab-assets.s3.amazonaws.com/estivador && chmod +x estivador
                echo "$(curl -sSL https://contentful-lab-assets.s3.amazonaws.com/estivador.sum)" | sha512sum -c

  compose:
    commands:
      install:
        description: 'Download & install docker-compose'
        parameters:
          version:
            type: string
            default: '1.22.0'
        steps:
          - run:
              name: Install docker-compose
              command: |
                curl -L https://github.com/docker/compose/releases/download/<< parameters.version >>/docker-compose-`uname -s`-`uname -m` > docker-compose
                sudo mv docker-compose /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
                docker-compose --version

  saucelabs:
    jobs:
      run:
        description: 'Run cross-browser tests on SauceLabs'
        parameters:
          browser:
            type: string
            default: 'chrome'
          platform:
            type: string
            default: 'Windows 10'
          selenium:
            type: string
            default: ''
        docker:
          - image: 806120774687.dkr.ecr.us-east-1.amazonaws.com/contentful/e2e-tests:master
            aws_auth:
              aws_access_key_id: $AWS_ACCESS_KEY_ID
              aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
        working_directory: /app
        steps:
          - run:
              name: Run e2e-tests for << parameters.browser >> browser
              command: |
                pytest -n=2 -d --max-worker-restart=2 --instafail --tb=short \
                --junit-xml=test-results/pytest/pytest-test-results.xml \
                --html=test-results/pytest/e2e-test-report.html \
                --pricing=v1 -m 'cross_browser' --driver SauceLabs \
                --capability browserName '<< parameters.browser >>' \
                --capability platform '<< parameters.platform >>' \
                --capability seleniumVersion '<< parameters.selenium >>'
          - store_artifacts:
              path: test-results
          - store_test_results:
              path: test-results

  ui-extensions-sdk:
    jobs:
      run:
        description: 'Run ui-extensions-sdk integration suite'
        docker:
          - image: cypress/browsers:node10.16.0-chrome77
            environment:
              TERM: xterm
        environment:
          CYPRESS_baseUrl: http://localhost:3001
          TEST_LOCAL_SDK: false
          UI_CONFIG: dev-on-production
        working_directory: /home/circleci/components/ui-extensions-sdk
        steps:
          - run:
              name: Provide NPM Token
              command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          - run:
              name: Install global dependencies
              command: npm install -g wait-on
          - checkout:
              path: /home/circleci/components/user_interface
          - run:
              name: Install user_interface dependencies
              working_directory: /home/circleci/components/user_interface
              command: npm ci
          - run:
              name: Clone master branch of ui-extensions-sdk
              command: git clone git@github.com:contentful/ui-extensions-sdk.git .
          - run:
              name: Install ui-extensions-sdk dependencies
              command: npm ci
          - run:
              name: Start user_interface locally
              working_directory: /home/circleci/components/user_interface
              command: npm start
              background: true
          - run:
              name: Wait http://localhost:3001/app/app.js to be ready
              command: npx wait-on http-get://localhost:3001/app/app.js
          - run:
              name: Run integration tests
              environment:
                CYPRESS_RETRIES: 3
              command: |
                set -e
                npm run integration
          - run: npm run merge-report
          - run: npm run generate-report
          - store_artifacts:
              path: test/cypress/reports
          - store_artifacts:
              path: test/cypress/screenshots

run_only_on_master_branch: &run_only_on_master_branch
  filters:
    branches:
      only: master

executors:
  cypress-base-10:
    docker:
      - image: 'cypress/base:10'
    resource_class: large
    environment:
      NODE_ENV: dev
      UI_CONFIG: localhost

jobs:
  build-with-statistics:
    docker:
      - image: circleci/node:10.15.3
    environment:
      DOCKER_IMAGE: contentful/user_interface
      DOCKER_REGISTRY: 806120774687.dkr.ecr.us-east-1.amazonaws.com
      LOG: 'yesplease'
      CYPRESS_INSTALL_BINARY: 0
      COMMENT_LAMBDA_URL: https://tooling-lambdas.ctfl.now.sh/user_interface/githubComments
      SNIFFER_UPLOAD_URL: https://user-interface-sniffer.herokuapp.com
    steps:
      - setup_remote_docker
      - checkout
      - estivador/install
      - run:
          name: Setup environment variables
          command: |
            echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: npm ci
      - run:
          name: Install Sniffer CLI tools
          command: npm install --no-save --no-shrinkwrap @contentful/project-sniffer-cli @contentful/sniffer-build-tracker
      - run:
          name: Run project sniffer and upload stats
          command: |
            export PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/'  -f7)
            npx project-sniffer . --config tools/sniffer
      - run:
          name: Build production image
          command: |
            docker-compose build production
      - run:
          name: Build assets image
          command: |
            # create a container from the "built" target
            # this is so that we can copy the output folder from it
            # This is extremely fast as all layers used by it are already
            # cached by building the production image earlier
            docker-compose up --no-start --build generate-assets
            docker cp user_interface-built-assets:app/output .
      - run:
          name: Push production image to our docker repo
          command: |
            ~/bin/estivador docker-ecr-login
            ~/bin/estivador put-image
            ~/bin/estivador promote-image
      - run:
          name: Upload build to user_interface build tracker server and post comment
          command: |
            export PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/'  -f7)
            export PATH_TO_BUILT_ASSETS='../output/files/production/app' # Path is relative to the config file
            npx sniffer-build-tracker version
            npx sniffer-build-tracker -vv stat-artifacts -c tools/sniffer-build-tracker.config.js
            npx sniffer-build-tracker upload-build -c tools/sniffer-build-tracker.config.js
      - run:
          name: Deploy micro-backends
          command: |
            export MICRO_BACKENDS_VERSION="$(cat package-lock.json | jq \'.dependencies["@contentful/micro-backends"].version\' --raw-output)"
            export AWS_REGION="$MICRO_BACKENDS_AWS_REGION"
            export AWS_ACCESS_KEY_ID="$MICRO_BACKENDS_AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$MICRO_BACKENDS_AWS_SECRET_ACCESS_KEY"

            echo "Using @contentful/micro-backends@$MICRO_BACKENDS_VERSION"
            npx "@contentful/micro-backends@$MICRO_BACKENDS_VERSION" "micro-backends" "rev-$CIRCLE_SHA1"
      - persist_to_workspace:
          root: .
          paths:
            - output
  lint:
    docker:
      - image: circleci/node:10.15.3
    environment:
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run: npm ci
      - run: tools/bin/validate-config.js config/*.json
      - run:
          name: Check OSS licenses
          command: |
            npm install --no-save --no-shrinkwrap license-checker
            bin/oss-license-check
      - run: npm run hint
      - run: npm run prettier:check
      - run: npm run cruise

  run-unit-tests:
    docker:
      - image: circleci/node:10.15.3-browsers
    environment:
      CYPRESS_INSTALL_BINARY: 0
      CI: true
    steps:
      - checkout
      - run:
          name: Setup environment
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run: npm ci

      # Jest tests
      - run:
          name: Run Jest tests
          command: NODE_ENV=production npm run jest:coverage # cant set NODE_ENV in environment above since jest is a dev dep
          environment:
            JEST_JUNIT_OUTPUT: 'reports/jest/jest-test-results.xml'
      - run: npm run codecov

      # Karma tests
      - run:
          name: Build test artifacts
          command: NODE_ENV=test node --max_old_space_size=3072 ./tools/bin/build-test.js
      - run:
          name: Run Karma tests
          command: |
            mkdir -p ./reports/karma
            npm run test:once
          environment:
            JUNIT_REPORT_PATH: ./reports/karma
            JUNIT_REPORT_NAME: karma-test-results.xml
      - store_test_results:
          path: reports

  run-e2e-tests:
    machine:
      docker_layer_caching: true
    parallelism: 4
    environment:
      CF_EMAIL: nobody@localhost
      COMPONENTS_ROOT: /home/circleci/components
      COMPOSE_FILE: docker-compose.yml:compose/e2e-tests.yml:compose/e2e-tests-ci.yml
      COMPOSE_HTTP_TIMEOUT: 180
      CONDITIONAL_VOLUME: ./artifacts/test-results:/app/test-results
      DOCKER_REGISTRY: 806120774687.dkr.ecr.us-east-1.amazonaws.com
      E2E_CHROME_IMAGE: selenium/standalone-chrome:3.14.0-curium
      E2E_TESTS_VERSION: master
      GATEKEEPER_VERSION: production
      WEB_CONCURRENCY: 0
      RAILS_ENV: acceptance
      RAILS_MAX_THREADS: 8
    working_directory: /home/circleci/components/lab
    steps:
      - checkout:
          path: /home/circleci/components/user_interface
      - run: echo 'export USER_INTERFACE_VERSION="$CIRCLE_SHA1"' >> $BASH_ENV
      - run:
          name: Add lab repository
          command: git clone git@github.com:contentful/api_integration_suite.git .
      - compose/install
      - estivador/install
      - run: mkdir -p $COMPONENTS_ROOT/lab/artifacts
      - run:
          name: Add e2e-tests repository
          command: git clone git@github.com:contentful/e2e-tests.git $COMPONENTS_ROOT/e2e-tests
      - run:
          name: Check for identically named branch in e2e-tests repo
          command: |
            echo 'export MATCHED_BRANCH_SHA=$(git --git-dir=$COMPONENTS_ROOT/e2e-tests/.git rev-parse --verify "origin/$CIRCLE_BRANCH" 2>/dev/null)' >> $BASH_ENV
            echo 'export E2E_TESTS_VERSION=${MATCHED_BRANCH_SHA:-master}' >> $BASH_ENV
      - run:
          name: Split test files
          command: |
            cd $COMPONENTS_ROOT/e2e-tests
            TESTFILES=$(circleci tests glob "tests/**/test_*.py" | circleci tests split --split-by=timings --timings-type=filename)
            echo "export TESTFILES=\"$TESTFILES\"" >> $BASH_ENV
      - run:
          name: Pull lab images
          command: |
            ~/bin/estivador docker-ecr-login
            make pull
            docker images --format "table {{.Repository}}\t{{.Tag}}"
      - run:
          name: Start lab
          command: |
            make setup-db start
            docker ps --format "table {{.Names}}\t{{.Image}}"
      - run:
          name: Pipe logs to the background
          command: docker-compose logs -t -f --no-color > $COMPONENTS_ROOT/lab/artifacts/output.log
          background: true
      - run:
          name: Run e2e tests
          command: |
            bin/run-e2e-tests.sh -- -n=2 -d --max-worker-restart=2 --instafail --tb=short --durations=10 \
            --force-flaky --max-runs=2 --no-flaky-report \
            --junit-xml=test-results/pytest/pytest-test-results.xml \
            --html=test-results/pytest/e2e-test-report.html \
            -m 'not dependent' --pricing=v2 --pricing=v1 ${TESTFILES}
      - run:
          name: Trigger sniffer CI stats build
          when: always
          command: |
            if [[ "$CIRCLE_NODE_INDEX" == "0" ]]; then
              $COMPONENTS_ROOT/user_interface/bin/trigger-sniffer-ci-stats-build
            fi
      - store_artifacts:
          path: ~/components/lab/artifacts
      - store_test_results:
          path: ~/components/lab/artifacts/test-results

  publish-pact-contracts:
    docker:
      - image: pactfoundation/pact-cli:latest
    working_directory: ~/user_interface
    steps:
      - attach_workspace:
          at: ~/user_interface
      - run:
          name: Merge and publish contracts to pact-broker
          command: |
            PACT_FILES=$(circleci tests glob "/pact/user_interface/pacts/**/*.json")
            /pact/entrypoint.sh publish $PACT_FILES --consumer-app-version=$CIRCLE_SHA1 --tag=$CIRCLE_BRANCH

workflows:
  build:
    jobs:
      - lint
      - build-with-statistics:
          requires:
            - lint
      - run-unit-tests
      - run-e2e-tests:
          requires:
            - build-with-statistics
      - cypress/run:
          name: run-contract-tests
          executor: cypress-base-10
          parallelism: 4
          pre-steps:
            - run: 'echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc'
            - run: npm install -g wait-on
          post-steps:
            - store_test_results:
                path: cypress/reports
            - persist_to_workspace:
                root: ~/project
                paths:
                  - pacts/*
          start: npm start
          wait-on: 'http-get://localhost:3001/app/app.js'
          command: |
            TESTFILES=$(circleci tests glob "test/cypress/integration/**/*.ts" | circleci tests split --split-by=timings --timings-type=filename | tr '\n' ',')
            npx cypress run --spec "${TESTFILES}" --env PACT_DIR="./pacts/${CIRCLE_NODE_INDEX}"
          store_artifacts: true
      - publish-pact-contracts:
          requires:
            - run-contract-tests
      - copy-assets/to-s3:
          name: copy-assets-to-s3
          post-steps:
            - post-comment/deployment:
                env: 'flinkly'
          requires:
            - build-with-statistics
      - ui-extensions-sdk/run:
          name: run-ui-extensions-integration
      - saucelabs/run:
          name: run-win10-edge-tests
          browser: 'MicrosoftEdge'
          selenium: '3.14.0'
          requires:
            - copy-assets-to-s3
          <<: *run_only_on_master_branch
      - saucelabs/run:
          name: run-win10-firefox-tests
          browser: 'firefox'
          requires:
            - copy-assets-to-s3
          <<: *run_only_on_master_branch
      # # Temporary turned off due to problems with SauceLabs
      # - saucelabs/run:
      #     name: run-osx10-safari-tests
      #     platform: 'macOS 10.13'
      #     browser: 'safari'
      #     requires:
      #       - copy-assets-to-s3
      #     <<: *run_only_on_master_branch

notify:
  webhooks:
    - url: https://samson.contentful.org/integrations/circleci/24884e787b5439c88cedef3d8bf1ca90
