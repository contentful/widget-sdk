version: 2.1
orbs:
  cypress: cypress-io/cypress@1.5.1
  deploy-assets:
    orbs:
      aws-s3: circleci/aws-s3@1.0.4
    jobs:
      to-s3:
        description: 'Build the image containing awscli and deploy assets to S3 using it'
        parameters:
          access_key_id:
            type: string
          secret_access_key:
            type: string
          region:
            type: string
          path:
            type: string
          bucket:
            type: string
        docker:
          - image: circleci/python:2.7
        steps:
          - attach_workspace:
              at: ~/workspace
          - checkout
          - run:
              name: Export AWS environment variables
              command: |
                echo 'export AWS_ACCESS_KEY_ID=<<parameters.access_key_id>>' >> $BASH_ENV
                echo 'export AWS_SECRET_ACCESS_KEY=<<parameters.secret_access_key>>' >> $BASH_ENV
                echo 'export AWS_REGION=<<parameters.region>>' >> $BASH_ENV
          - aws-s3/copy:
              from: <<parameters.path>>
              to: s3://<<parameters.bucket>>
              arguments: '--acl public-read --recursive'
  post-comment:
    commands:
      to-pr:
        description: 'Post deployment URL to PR that triggered the build as a comment'
        parameters:
          env:
            type: string
            description: quirely or flinkly
        steps:
          - run:
              name: Post deployment URL to GitHub
              command: |
                export PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/'  -f7)
                curl -i -X POST --data-binary "{\"issue\": ${PR_NUMBER:-\"\"}, \"branch\": \"${CIRCLE_BRANCH}\", \"commitSha\": \"${CIRCLE_SHA1}\", \"env\": \"<<parameters.env>>\"}" \
                -H 'content-type: application/json' \
                https://tooling-lambdas.ctfl1.now.sh/user_interface/comments?token=$GITHUB_PAT_REPO_SCOPE_SQUIRELY

executors:
  cypress-base-8:
    docker:
      - image: 'cypress/base:8'
    environment:
      NODE_ENV: dev
      UI_CONFIG: localhost

jobs:
  build-and-push-image:
    machine:
      docker_layer_caching: true
    environment:
      DOCKER_IMAGE: contentful/user_interface
      DOCKER_REGISTRY: 806120774687.dkr.ecr.us-east-1.amazonaws.com
    steps:
      - checkout
      - run:
          name: Install docker-compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Setup environment variables
          command: |
            echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run:
          name: Build production image
          command: |
            docker-compose build production
      - run:
          name: Build assets image
          command: |
            # create a container from the "built" target
            # this is so that we can copy the output folder from it
            # This is extremely fast as all layers used by it are already
            # cached by building the production image earlier
            docker-compose up --no-start --build generate-assets
            docker cp user_interface-built-assets:app/output .
      - run:
          name: Push production image to our docker repo
          command: |
            curl -fsSLO https://contentful-lab-assets.s3.amazonaws.com/estivador && chmod +x estivador
            echo "$(curl -sSL https://contentful-lab-assets.s3.amazonaws.com/estivador.sum)" | sha512sum -c
            ./estivador docker-ecr-login
            ./estivador put-image
            ./estivador promote-image
      - persist_to_workspace:
          root: .
          paths:
            - output

  deploy-micro-backends:
    docker:
      - image: circleci/node:8.10
    environment:
      LOG: 'yesplease'
    steps:
      - checkout
      - run:
          name: Setup environment
          command: |
            echo $'export MICRO_BACKENDS_VERSION="$(cat package-lock.json | jq \'.dependencies["@contentful/micro-backends"].version\' --raw-output)"' >> $BASH_ENV
            echo 'export AWS_REGION="$MICRO_BACKENDS_AWS_REGION"' >> $BASH_ENV
            echo 'export AWS_ACCESS_KEY_ID="$MICRO_BACKENDS_AWS_ACCESS_KEY_ID"' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY="$MICRO_BACKENDS_AWS_SECRET_ACCESS_KEY"' >> $BASH_ENV
            echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run:
          name: Deploy micro-backends
          command: |
            echo "Using @contentful/micro-backends@$MICRO_BACKENDS_VERSION"
            npx "@contentful/micro-backends@$MICRO_BACKENDS_VERSION" "micro-backends" "rev-$CIRCLE_SHA1"

  lint:
    docker:
      - image: circleci/node:10.15.3
    environment:
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run: npm ci
      - run: tools/bin/validate-config.js config/*.json
      - run: npm run hint

  run-jest-tests:
    docker:
      - image: circleci/node:10.15.3
    environment:
      CI: true
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run: echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run: npm ci
      - run:
          name: Run Jest tests
          command: NODE_ENV=production npm run jest:coverage # cant set NODE_ENV in environment above since jest is a dev dep
          environment:
            JEST_JUNIT_OUTPUT: 'reports/jest/jest-test-results.xml'
      - run: npm run codecov
      - store_test_results:
          path: reports

  run-karma-tests:
    docker:
      - image: circleci/node:10.15.3-browsers
    environment:
      CYPRESS_INSTALL_BINARY: 0
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Setup environment
          command: |
            echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
            echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV
      - run:
          name: Split tests into specs for the run
          command: |
            TESTFILES=$(circleci tests glob "test/{unit,integration}/**/*.js" | circleci tests split --split-by=timings --timings-type=filename)
            echo "export TESTFILES=\"$TESTFILES\"" >> $BASH_ENV
      - run: echo $TESTFILES
      - run: npm ci
      - run:
          name: Build test artifacts
          command: NODE_ENV=production node --max_old_space_size=3072 ./node_modules/.bin/gulp build-test
      - run:
          name: Run Karma tests
          command: |
            mkdir -p ./reports/karma
            npm run test:once -- $TESTFILES
          environment:
            JUNIT_REPORT_PATH: ./reports/karma
            JUNIT_REPORT_NAME: karma-test-results.xml
      - store_test_results:
          path: reports

  run-e2e-tests:
    machine:
      docker_layer_caching: true
    parallelism: 4
    environment:
      CF_EMAIL: nobody@localhost
      COMPONENTS_ROOT: /home/circleci/components
      COMPOSE_FILE: docker-compose.yml:compose/e2e-tests.yml:compose/e2e-tests-ci.yml
      COMPOSE_HTTP_TIMEOUT: 180
      CONDITIONAL_VOLUME: ./artifacts/test-results:/app/test-results
      DOCKER_REGISTRY: 806120774687.dkr.ecr.us-east-1.amazonaws.com
      E2E_CHROME_IMAGE: selenium/standalone-chrome:3.14.0-curium
      E2E_TESTS_VERSION: master
      GATEKEEPER_VERSION: production
      WEB_CONCURRENCY: 0
      RAILS_MAX_THREADS: 8
    working_directory: /home/circleci/components/lab
    steps:
      - checkout:
          path: /home/circleci/components/user_interface
      - run: echo 'export USER_INTERFACE_VERSION="$CIRCLE_SHA1"' >> $BASH_ENV
      - run:
          name: Add lab repository
          command: git clone git@github.com:contentful/lab.git .
      - run:
          name: Install docker-compose
          command: |
            sudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
      - run:
          name: Download estivador, validate checksum and log into private registry
          command: |
            curl -fsSLO https://contentful-lab-assets.s3.amazonaws.com/estivador && chmod +x estivador
            echo "$(curl -sSL https://contentful-lab-assets.s3.amazonaws.com/estivador.sum)" | sha512sum -c
            ./estivador docker-ecr-login
      - run: mkdir -p $COMPONENTS_ROOT/lab/artifacts
      - run:
          name: Add e2e-tests repository
          command: git clone git@github.com:contentful/e2e-tests.git $COMPONENTS_ROOT/e2e-tests
      - run:
          name: Check for identically named branch in e2e-tests repo
          command: |
            echo 'export MATCHED_BRANCH_SHA=$(git --git-dir=$COMPONENTS_ROOT/e2e-tests/.git rev-parse --verify "origin/$CIRCLE_BRANCH" 2>/dev/null)' >> $BASH_ENV
            echo 'export E2E_TESTS_VERSION=${MATCHED_BRANCH_SHA:-master}' >> $BASH_ENV
      - run:
          name: Split test files
          command: |
            cd $COMPONENTS_ROOT/e2e-tests
            TESTFILES=$(circleci tests glob "tests/**/test_*.py" | circleci tests split --split-by=timings --timings-type=filename)
            echo "export TESTFILES=\"$TESTFILES\"" >> $BASH_ENV
      - run:
          name: Pull lab images
          command: |
            make pull
            docker images --format "table {{.Repository}}\t{{.Tag}}"
      - run:
          name: Start lab
          command: |
            make setup-db start
            docker ps --format "table {{.Names}}\t{{.Image}}"
      - run:
          name: Pipe logs to the background
          command: docker-compose logs -t -f --no-color > $COMPONENTS_ROOT/lab/artifacts/output.log
          background: true
      - run:
          name: Run e2e tests
          command: |
            bin/run-e2e-tests.sh -- -n=2 -d --max-worker-restart=2 --instafail --tb=short --durations=10 \
            --force-flaky --max-runs=2 --no-flaky-report \
            --junit-xml=test-results/pytest/pytest-test-results.xml \
            --html=test-results/pytest/e2e-test-report.html \
            -m 'not dependent' --pricing=v2 --pricing=v1 ${TESTFILES}
      - run:
          name: Trigger sniffer build
          when: always
          command: |
            if [[ "$CIRCLE_NODE_INDEX" == "0" ]]; then
              $COMPONENTS_ROOT/user_interface/bin/trigger-jenkins-sniffer
            fi
      - store_artifacts:
          path: ~/components/lab/artifacts
      - store_test_results:
          path: ~/components/lab/artifacts/test-results

workflows:
  build:
    jobs:
      - build-and-push-image
      - lint
      - run-jest-tests
      - run-karma-tests
      - run-e2e-tests:
          requires:
            - build-and-push-image
      - deploy-micro-backends
      - cypress/run:
          name: run-contract-tests
          executor: cypress-base-8
          pre-steps:
            - run: 'echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc'
          post-steps:
            - store_test_results:
                path: cypress/reports
          start: npm start
          wait-on: 'http://localhost:3001'
          store_artifacts: true
      - deploy-assets/to-s3:
          name: deploy-assets-to-preview
          access_key_id: '${AWS_S3_PREVIEW_ACCESS_KEY_ID}'
          secret_access_key: '${AWS_S3_PREVIEW_SECRET_ACCESS_KEY}'
          region: 'eu-west-1'
          path: '~/workspace/output/files/preview'
          bucket: 'cf-preview-static-cdnorigin'
          post-steps:
            - post-comment/to-pr:
                env: 'quirely'
          requires:
            - build-and-push-image
      - deploy-assets/to-s3:
          name: deploy-assets-to-staging
          access_key_id: '${AWS_S3_STAGING_ACCESS_KEY_ID}'
          secret_access_key: '${AWS_S3_STAGING_SECRET_ACCESS_KEY}'
          region: 'us-east-1'
          path: '~/workspace/output/files/staging'
          bucket: 'cf-staging-static-cdnorigin'
          post-steps:
            - run:
                name: Trigger Jenkins Staging Dependent Tests
                command: bin/trigger-jenkins-dependent
            - post-comment/to-pr:
                env: 'flinkly'
          requires:
            - build-and-push-image
      - deploy-assets/to-s3:
          name: deploy-assets-to-prod
          access_key_id: '${AWS_S3_PRODUCTION_ACCESS_KEY_ID}'
          secret_access_key: '${AWS_S3_PRODUCTION_SECRET_ACCESS_KEY}'
          region: 'us-east-1'
          path: '~/workspace/output/files/production'
          bucket: 'static.cdnorigin.contentful.com'
          requires:
            - build-and-push-image

notify:
  webhooks:
    - url: https://samson.contentful.org/integrations/circleci/24884e787b5439c88cedef3d8bf1ca90
