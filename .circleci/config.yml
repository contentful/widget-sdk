version: 2.1

orbs:
  cypress: cypress-io/cypress@1.27.0
  samson: contentful/trigger-samson@1
  polaris-scan: contentful/polaris-scan@1
  dast-scan: contentful/dast-scan@1
  copy-assets:
    orbs:
      aws-s3: circleci/aws-s3@1.0.15
    jobs:
      to-s3:
        description: 'Build the image containing awscli and deploy assets to S3 using it'
        docker:
          - image: cimg/python:3.6
        steps:
          - attach_workspace:
              at: ~/workspace
          - checkout
          - run:
              name: Export preview AWS environment variables
              command: |
                echo 'export AWS_ACCESS_KEY_ID=${AWS_S3_PREVIEW_ACCESS_KEY_ID}' >> $BASH_ENV
                echo 'export AWS_SECRET_ACCESS_KEY=${AWS_S3_PREVIEW_SECRET_ACCESS_KEY}' >> $BASH_ENV
                echo 'export AWS_REGION="eu-west-1"' >> $BASH_ENV
          - aws-s3/copy:
              from: ~/workspace/output/files/preview/app
              to: s3://cf-preview-static-cdnorigin/app
              arguments: --acl public-read --recursive --cache-control "immutable,public,max-age=86400"
          - aws-s3/copy:
              from: ~/workspace/output/files/preview/archive
              to: s3://cf-preview-static-cdnorigin/archive
              arguments: --acl public-read --recursive --cache-control "no-cache"
          - run:
              name: Export staging AWS environment variables
              command: |
                echo 'export AWS_ACCESS_KEY_ID=${AWS_S3_STAGING_ACCESS_KEY_ID}' >> $BASH_ENV
                echo 'export AWS_SECRET_ACCESS_KEY=${AWS_S3_STAGING_SECRET_ACCESS_KEY}' >> $BASH_ENV
                echo 'export AWS_REGION="eu-west-1"' >> $BASH_ENV
          - aws-s3/copy:
              from: ~/workspace/output/files/staging/app
              to: s3://cf-staging-static-cdnorigin/app
              arguments: --acl public-read --recursive --cache-control "immutable,public,max-age=86400"
          - aws-s3/copy:
              from: ~/workspace/output/files/staging/archive
              to: s3://cf-staging-static-cdnorigin/archive
              arguments: --acl public-read --recursive --cache-control "no-cache"
          - run:
              name: Export staging AWS environment variables
              command: |
                echo 'export AWS_ACCESS_KEY_ID=${AWS_S3_PRODUCTION_ACCESS_KEY_ID}' >> $BASH_ENV
                echo 'export AWS_SECRET_ACCESS_KEY=${AWS_S3_PRODUCTION_SECRET_ACCESS_KEY}' >> $BASH_ENV
                echo 'export AWS_REGION="eu-west-1"' >> $BASH_ENV
          - aws-s3/copy:
              from: ~/workspace/output/files/production/app
              to: s3://static.cdnorigin.contentful.com/app
              arguments: --acl public-read --recursive --cache-control "immutable,public,max-age=86400"
          - aws-s3/copy:
              from: ~/workspace/output/files/production/archive
              to: s3://static.cdnorigin.contentful.com/archive
              arguments: --acl public-read --recursive --cache-control "no-cache"

  estivador:
    commands:
      install:
        description: 'Download estivador and validate checksum'
        steps:
          - run:
              name: Install estivador
              working_directory: ~/bin
              command: |
                curl -fsSLO https://contentful-lab-assets.s3.amazonaws.com/estivador && chmod +x estivador
                echo "$(curl -sSL https://contentful-lab-assets.s3.amazonaws.com/estivador.sum)" | sha512sum -c

  compose:
    commands:
      install:
        description: 'Download & install docker-compose'
        parameters:
          version:
            type: string
            default: '1.22.0'
        steps:
          - run:
              name: Install docker-compose
              command: |
                curl -L https://github.com/docker/compose/releases/download/<< parameters.version >>/docker-compose-`uname -s`-`uname -m` > docker-compose
                sudo mv docker-compose /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose
                docker-compose --version

  saucelabs:
    jobs:
      run:
        description: 'Run cross-browser tests on SauceLabs'
        parameters:
          browser:
            type: string
            default: 'chrome'
          platform:
            type: string
            default: 'Windows 10'
          selenium:
            type: string
            default: ''
        docker:
          - image: 806120774687.dkr.ecr.us-east-1.amazonaws.com/contentful/e2e-tests:facb043b5605c148be1985e567f8678aeda606f9
            aws_auth:
              aws_access_key_id: $AWS_ACCESS_KEY_ID
              aws_secret_access_key: $AWS_SECRET_ACCESS_KEY
        working_directory: /app
        steps:
          - run:
              name: Run e2e-tests for << parameters.browser >> browser
              command: |
                pytest -n=2 -d --max-worker-restart=2 --instafail --tb=short \
                --junit-xml=test-results/pytest/pytest-test-results.xml \
                --html=test-results/pytest/e2e-test-report.html \
                --pricing=v1 -m 'cross_browser' --driver SauceLabs \
                --capability browserName '<< parameters.browser >>' \
                --capability platform '<< parameters.platform >>' \
                --capability seleniumVersion '<< parameters.selenium >>'
          - store_artifacts:
              path: test-results
          - store_test_results:
              path: test-results

  ui-extensions-sdk:
    jobs:
      run:
        description: 'Run ui-extensions-sdk integration suite'
        docker:
          - image: cypress/browsers:node12.18.0-chrome83-ff77
            environment:
              TERM: xterm
        resource_class: large
        environment:
          CYPRESS_baseUrl: http://localhost:3001
          TEST_LOCAL_SDK: true
          UI_CONFIG: dev-on-production
        working_directory: /home/circleci/components/ui-extensions-sdk
        steps:
          - run:
              name: Provide NPM Token
              command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
          - checkout:
              path: /home/circleci/components/user_interface
          - run:
              name: Install user_interface dependencies
              working_directory: /home/circleci/components/user_interface
              command: npm ci
              environment:
                CYPRESS_INSTALL_BINARY: 0
          - run:
              name: Clone master branch of ui-extensions-sdk
              command: git clone git@github.com:contentful/ui-extensions-sdk.git .
          - run:
              name: Install ui-extensions-sdk dependencies
              command: npm ci
          - run:
              name: Start user_interface locally
              working_directory: /home/circleci/components/user_interface
              command: npm start
              background: true
          - run:
              name: Wait http://localhost:3001 to be ready
              command: npm run wait-for-app
              working_directory: /home/circleci/components/user_interface
          - run:
              name: Run integration tests
              environment:
                CYPRESS_RETRIES: 3
              command: |
                set -e
                npm run integration
          - run: npm run merge-report
          - run: npm run generate-report
          - store_artifacts:
              path: test/cypress/reports
          - store_artifacts:
              path: test/cypress/screenshots

parameters:
  # Required for telemetry side contract verification
  contract_url:
    type: string
    default: ''
  consumer_name:
    type: string
    default: 'all'
  consumer_version:
    type: string
    default: 'all'
  provider_version:
    type: string
    default: ''

run_only_on_master_branch: &run_only_on_master_branch
  filters:
    branches:
      only: master

executors:
  cypress-base:
    docker:
      - image: 'cypress/base:12.18.0'
    resource_class: large
    environment:
      NODE_ENV: test
      UI_CONFIG: localhost
  node-base:
    docker:
      - image: circleci/node:12.18.2
  node-browsers:
    docker:
      - image: circleci/node:12.18.2-browsers

commands:
  with-npm-token:
    steps:
      - run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> ~/.npmrc
      - run: echo 'export SSH_KEY="$(openssl rsa -in ~/.ssh/id_rsa)"' >> $BASH_ENV

  gh-comment:
    parameters:
      file:
        type: string
      reference:
        type: string
      vars:
        type: string
        default: ''
    steps:
      - checkout
      - with-npm-token
      - run:
          command: |
            if [[ ! -z "$CIRCLE_PULL_REQUEST" && -f "<<parameters.file>>" ]]
            then
              # re-export for BC
              export GH_TOKEN=$GITHUB_PAT_REPO_SCOPE_SQUIRELY
              VARS=$(echo <<parameters.vars>> | sed -E 's/,[[:space:]]*/ --var /')
              NOW=$(date +"%d.%m.%Y, %H:%M")
              npx @contentful/circleci-orb-tools@1 gh-comment --template-file <<parameters.file>> \
                --issue-url $CIRCLE_PULL_REQUEST --reference <<parameters.reference>> \
                --var "revision=$CIRCLE_SHA1" --var "now=$NOW" \
                --var "upload_prefix=$UPLOAD_PREFIX" --var $VARS \
                --var "branch=$CIRCLE_BRANCH"
            fi

jobs:
  deploy-comment:
    executor: node-base
    steps:
      - gh-comment:
          file: .circleci/preview-deployment.md
          reference: deploy

  build-with-statistics:
    executor: node-base
    environment:
      DOCKER_IMAGE: contentful/user_interface
      DOCKER_REGISTRY: 806120774687.dkr.ecr.us-east-1.amazonaws.com
      LOG: 'yesplease'
      CYPRESS_INSTALL_BINARY: 0
      SNIFFER_UPLOAD_URL: https://user-interface-sniffer.herokuapp.com
      SNIFFER_MARKDOWN_FILE: sniffer-<< pipeline.id >>.md
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - estivador/install
      - with-npm-token
      - run: npm ci
      - run:
          name: Install Sniffer CLI tools
          command: npm install --no-save --no-shrinkwrap @contentful/project-sniffer-cli @contentful/sniffer-build-tracker
      - run:
          name: Run project sniffer and upload stats
          command: |
            export PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/'  -f7)
            npx project-sniffer . --config tools/sniffer
      - gh-comment:
          file: sniffer-<< pipeline.id >>.md
          reference: sniffer-react
      - run:
          name: Build production image
          command: |
            docker-compose build production
      - run:
          name: Build assets image
          command: |
            # create a container from the "built" target
            # this is so that we can copy the output folder from it
            # This is extremely fast as all layers used by it are already
            # cached by building the production image earlier
            docker-compose up --no-start --build generate-assets
            docker cp user_interface-built-assets:app/output .
      - run:
          name: Push production image to our docker repo
          command: |
            ~/bin/estivador docker-ecr-login
            ~/bin/estivador put-image
            ~/bin/estivador promote-image
      - run:
          name: Upload build to user_interface build tracker server and post comment
          command: |
            export PR_NUMBER=$(echo $CIRCLE_PULL_REQUEST | cut -d '/'  -f7)
            export PATH_TO_BUILT_ASSETS='../output/files/production/app' # Path is relative to the config file
            npx sniffer-build-tracker version
            npx sniffer-build-tracker -vv stat-artifacts -c tools/sniffer-build-tracker.config.js
            npx sniffer-build-tracker upload-build -c tools/sniffer-build-tracker.config.js --skip-dirty-check
      - gh-comment:
          file: sniffer-<< pipeline.id >>.md
          reference: sniffer-build-stats
      - persist_to_workspace:
          root: .
          paths:
            - output
  lint:
    executor: node-base
    environment:
      CYPRESS_INSTALL_BINARY: 0
    steps:
      - checkout
      - with-npm-token
      - run: npm ci
      - run: tools/bin/validate-config.js config/*.json
      - run: npm run check-code-ownership
      - run: npm run check-types
      - run: npm run lint
      - run: npm run prettier:check
      - run: npm run cruise
      - run:
          name: Check OSS licenses
          command: |
            npm install --no-save --no-shrinkwrap license-checker
            bin/oss-license-check

  run-unit-tests:
    executor: node-browsers
    environment:
      CYPRESS_INSTALL_BINARY: 0
      CI: true
    steps:
      - checkout
      - with-npm-token
      - run: npm ci

      # Jest tests
      - run:
          name: Run Jest tests
          command: |
            export NODE_ENV=test
            export NODE_OPTIONS=--max_old_space_size=3072
            npm run jest:coverage

  publish-pact-contracts:
    docker:
      - image: pactfoundation/pact-cli:latest
    working_directory: ~/user_interface
    steps:
      - attach_workspace:
          at: ~/user_interface
      - run:
          name: Merge and publish contracts to pact-broker
          command: |
            PACT_FILES=$(circleci tests glob "/pact/user_interface/pact*/**/*.json")
            /pact/entrypoint.sh publish $PACT_FILES --consumer-app-version=$CIRCLE_SHA1 --tag=$CIRCLE_BRANCH

  verify-contracts: &verify-contracts
    machine:
      docker_layer_caching: true
    environment:
      CONTRACT_URL: << pipeline.parameters.contract_url >>
      CONSUMER_NAME: << pipeline.parameters.consumer_name >>
      CONSUMER_VERSION: << pipeline.parameters.consumer_version >>
      PROVIDER_SHA: << pipeline.parameters.provider_version >>
    steps:
      - checkout
      - when:
          condition: << pipeline.parameters.provider_version >>
          steps:
            - run: git checkout << pipeline.parameters.provider_version >>
      - run:
          name: Verify contracts
          command: |
            echo "Not yet implemented"

  verify-all-contracts:
    <<: *verify-contracts

workflows:
  build:
    unless: << pipeline.parameters.contract_url >>
    jobs:
      - lint
      - build-with-statistics:
          requires:
            - lint
      - run-unit-tests:
          post-steps:
            - store_test_results:
                path: reports
            - persist_to_workspace:
                root: ~/project
                paths:
                  - pact/*
      - polaris-scan/run-polaris-scan:
          requires_build: false
          context:
            - sast-scan
      - cypress/run:
          name: run-contract-tests
          no-workspace: true
          executor: cypress-base
          parallelism: 4
          pre-steps:
            - with-npm-token
          post-steps:
            - store_test_results:
                path: cypress/reports
            - persist_to_workspace:
                root: ~/project
                paths:
                  - pacts/*
          start: npm start
          wait-on: '--verbose --interval 2000 --delay 60000 --timeout 300000 http://localhost:3001'
          command: |
            TESTFILES=$(circleci tests glob "test/cypress/integration/**/*.ts" | circleci tests split --split-by=timings --timings-type=filename | tr '\n' ',')
            npx cypress run --spec "${TESTFILES}" --env PACT_DIR="./pacts/${CIRCLE_NODE_INDEX}"
          store_artifacts: true
      - publish-pact-contracts:
          requires:
            - run-unit-tests
            - run-contract-tests
      - copy-assets/to-s3:
          name: copy-assets-to-s3
          requires:
            - build-with-statistics
      - deploy-comment:
          requires:
            - copy-assets-to-s3
      - ui-extensions-sdk/run:
          name: run-ui-extensions-integration
      - samson/trigger-samson:
          samson-url: https://samson.contentful.org/integrations/generic/24884e787b5439c88cedef3d8bf1ca90
          requires:
            - copy-assets-to-s3
      - dast-scan/detectify:
          scan_profile_id: d98a988be780be6cfa561ed310647053
          context:
            - dast-scan
          requires:
            - deploy-comment
      # - saucelabs/run:
      #     name: run-win10-edge-tests
      #     browser: 'MicrosoftEdge'
      #     selenium: '3.14.0'
      #     requires:
      #       - copy-assets-to-s3
      #     <<: *run_only_on_master_branch
      # - saucelabs/run:
      #     name: run-win10-firefox-tests
      #     browser: 'firefox'
      #     requires:
      #       - copy-assets-to-s3
      #     <<: *run_only_on_master_branch
verify-contract:
  when: << pipeline.parameters.contract_url >>
  jobs:
    - verify-contracts
