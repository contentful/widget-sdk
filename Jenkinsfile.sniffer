#!/usr/bin/env groovy

@Library('contentful-jenkins-lib@master') _

pipeline {
  agent {
    kubernetes {
      label buildId('sniffer')
      containerTemplate {
        name 'node'
        image 'node:8-alpine'
        ttyEnabled true
        command 'cat'
      }
    }
  }
  parameters {
    string(name: 'last', defaultValue: '50', description: 'Analyze number of commits')
    string(name: 'jump', defaultValue: '1', description: '')
  }
  options {
    timestamps()
    timeout(time: 20, unit: 'MINUTES')
    checkoutToSubdirectory('user_interface')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  stages {
    stage('Checkout sniffer repos') {
      steps {
        sourceCodeCheckout('build-stats', 'master', 'build-stats')
        sourceCodeCheckout('project-sniffer-dashboard', 'master', 'project-sniffer-dashboard')
      }
    }
    stage('Install dependencies') {
      steps {
        container('node') {
          sh 'apk add --no-cache git zip curl'
        }
        withCredentials([string(credentialsId: 'NPM_TOKEN', variable: 'NPM_TOKEN')]) {
          sh 'echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > project-sniffer-dashboard/.npmrc'
        }
        withCredentials([string(credentialsId: 'netlify-ui-sniffer-api-id', variable: 'API_ID')]) {
          sh 'echo "REACT_APP_NETLIFY_SITE=${API_ID}" > project-sniffer-dashboard/.env'
        }
      }
    }
    stage('Build') {
      steps {
        container('node') {
          sh 'npm install lodash @babel/parser @babel/traverse @contentful/project-sniffer'
          sh 'contentful-project-sniffer user_interface --config tools/sniffer --last ${params.last} --jump ${params.jump} --output project-sniffer-dashboard/src'
          dir('build-stats') {
            sh 'npm install && npm run build'
            withCredentials([
              string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN'),
              string(credentialsId: 'GITHUB_WEBHOOK_TOKEN', variable: 'GITHUB_WEBHOOK_TOKEN'),
              usernamePassword(credentialsId: 'jenkins-ba', passwordVariable: 'JENKINS_PWD', usernameVariable: 'JENKINS_USERNAME')
            ]){
              sh 'node built/src/cli/index.js'
            }
            sh 'cp -R output ../project-sniffer-dashboard/src/CIStats/data/'
          }
          dir('project-sniffer-dashboard') {
            sh 'npm install && npm run build'
          }
          withCredentials([usernamePassword(credentialsId: 'netlify-ui-sniffer', passwordVariable: 'BASIC_PWD', usernameVariable: 'BASIC_USER')]){
            writeFile(file: '_headers', text: "/*\n  Basic-Auth: ${BASIC_USER}:${BASIC_PWD}")
            sh 'cp _headers project-sniffer-dashboard/build/'
          }
          writeFile(file: '_redirects', text: '/* /index.html 200')
          sh 'cp _redirects project-sniffer-dashboard/build/'
          sh 'npm --prefix ./project-sniffer-dashboard run zip ./project-sniffer-dashboard'
        }
      }
      post {
        always {
          container('node') {
            archiveArtifacts(allowEmptyArchive: true, artifacts: 'project-sniffer-dashboard/build/**, project-sniffer-dashboard/build.zip')
          }
        }
      }
    }
    stage('Publish to Netlify') {
      steps {
        container('node') {
          withCredentials([string(credentialsId: 'NETLIFY_TOKEN', variable: 'NETLIFY_TOKEN')]) {
            sh 'curl ' +
            '-H "Content-Type: application/zip" ' +
            '-H "Authorization: Bearer ${NETLIFY_TOKEN}" ' +
            '--data-binary "@project-sniffer-dashboard/build.zip" ' +
            '--url https://api.netlify.com/api/v1/sites/user-interface-sniffer.netlify.com/deploys'
          }
        }
      }
    }
  }
  post {
    success {
      slackSend(channel: '#dev-frontend-bots', color: 'good', message: 'DEPLOYED: *user_interface* project sniffer (https://user-interface-sniffer.netlify.com/)', tokenCredentialId: 'slack-notify')
    }
    failure {
      slackSend(channel: '#dev-frontend-bots', color: 'danger', message: "FAILED: *user_interface* project sniffer (<${env.BUILD_URL}console|Console>)", tokenCredentialId: 'slack-notify')
    }
  }
}
