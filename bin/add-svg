#!/usr/bin/env node

// Convert SVG files to hyperscript modules and write them to
// 'src/javascripts/svg'
//
// Usage: bin/add-svg <PATH...>


const SVGO = require('svgo');
const P = require('path');
const {htmlToHs} = require('./jade-to-h');
const {FS} = require('../tools/lib/utils');

const svgo = new SVGO({
  plugins: ['removeTitle']
});

const outDir = P.join('src', 'javascripts', 'svg');

if (!module.parent) {
  const srcs = process.argv.slice(2);
  Promise.all(srcs.map(async function (src) {
    const baseName = P.basename(src, '.svg');
    const outPath = P.join(outDir, baseName + '.es6.js');
    console.log(`Writing ${outPath}`);

    const svg = await FS.readFileAsync(src, 'utf8');
    const optimized = await svgOptimize(svg);

    const hs = htmlToHs(optimized);
    const hsModule = `import {h} from 'ui/Framework';\n\nexport default ${hs}`;
    return FS.writeFileAsync(outPath, hsModule);
  }));
}

function svgOptimize (data) {
  return new Promise((resolve, reject) => {
    svgo.optimize(data, ({error, data}) => {
      if (error) {
        reject(error);
      } else {
        resolve(data);
      }
    });
  });
}
