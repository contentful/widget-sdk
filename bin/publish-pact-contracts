#!/usr/bin/env node
// TODO: We could extract this script to a utility reusable by all JS projects
// Note the we don't have SemVer for the UI so consumerVersion is just the short SHA
console.log('About to publish pact contracts to the broker');
const pact = require('@pact-foundation/pact-node');
const path = require('path');

const pactBroker = process.env.PACT_BROKER_URL
if (!pactBroker) {
  console.error('PACT_BROKER_URL environment variable is not configured.')
  process.exit(1)
}

// TODO: (in follow up PR) Do not use CIRCLE_* env vars (makes this script CircleCI dependant)
const branchName = process.env.CIRCLE_BRANCH
if (!branchName) {
  console.error('CIRCLE_BRANCH environment variable is not configured.')
  process.exit(1)
}

const sha = process.env.CIRCLE_SHA1
if (!branchName) {
  console.error('CIRCLE_SHA1 environment variable is not configured.')
  process.exit(1)
}
const isValidSHA =
  (sha.length === 7 || sha.length === 40) &&
  [...sha].every(c => /[0-9a-f]/i.test(c));
if (!isValidSHA) {
  console.error(`The CIRCLE_SHA1 env. var. does not look like a SHA: "${sha}. It must be a hex with length of either 7 or 40"`);
  process.exit(1);
}

const opts = {
  pactFilesOrDirs: [
    path.resolve(process.cwd(), "pacts")
  ],
  pactBroker,
  consumerVersion: (sha.length > 7 ? sha.substring(0, 7) : sha).toLowerCase(),
  tags: [branchName],
  verbose: true
}

if (branchName === 'master') {
  opts.tags.push('staging')
}

const pactBrokerUsername = process.env.PACT_BROKER_USERNAME
const pactBrokerPassword = process.env.PACT_BROKER_PASSWORD

if (
  (!pactBrokerUsername && pactBrokerPassword) ||
  (pactBrokerUsername && !pactBrokerPassword)
) {
  console.error('Either set both PACT_BROKER_USERNAME and PACT_BROKER_PASSWORD environment variables or none.')
  process.exit(1)
}

if (pactBrokerUsername && pactBrokerPassword) {
  opts.pactBrokerUsername = pactBrokerUsername
  opts.pactBrokerPassword = pactBrokerPassword
}

console.log(`Publishing pact contracts for "user_interface" version=${opts.consumerVersion}) tags=${opts.tags.map(t => `"${t}"`).join(',')} to ${pactBroker}`)
pact.publishPacts(opts).then(
  () => {
    console.log('Pact contracs published successfully');
  },
  (e) => {
    console.error('Cannot publish pact contracts!');
    console.error(e);
    process.exit(1);
  }
);
