/**
 * This client was automatically generated by Segment Typewriter. ** Do Not Edit **
 */

/**
 * Ajv is a peer dependency for development builds. It's used to apply run-time validation
 * to message payloads before passing them on to the underlying analytics instance.
 *
 * Note that the production bundle does not depend on Ajv.
 *
 * You can install it with: `npm install --save-dev ajv`.
 */
import Ajv from 'ajv';
import * as Segment from './segment';

export interface PageViewed {
  accepted_permissions?: any | null;
  add_to_context?: boolean;
  api_key_id?: string;
  app_id?: any | null;
  asset_id?: string;
  content_type_id?: string;
  definition_id?: string;
  entry_id?: string;
  environment_id?: string;
  ignore_leave_confirmation?: boolean;
  jump_to_role?: string;
  locale_id?: string;
  name?: string;
  org_id?: string;
  org_owner_or_admin?: any | null;
  path?: string;
  path_suffix?: string;
  previous_entries?: string;
  referrer?: string;
  search?: string;
  space_id?: string;
  tab?: string;
  template_id?: any | null;
  title?: string;
  url?: string;
  user_id?: string;
  webhook_id?: string;
}
export interface Payload {
  hasInaccessibleTasks?: boolean;
  numPendingTasks?: number;
  numVisiblePendingTasks?: number;
}
export interface Data {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload;
  scope?: string;
  spaceId?: string;
}
export interface AccountDropdownPendingTasksFetched {
  data?: Data;
}
export interface Data1 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface ApiKeyClipboardCopy {
  data?: Data1;
}
export interface Payload1 {
  definitionId?: string;
}
export interface Data2 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload1;
  scope?: string;
}
export interface AppManagementCreated {
  data?: Data2;
}
export interface Payload2 {
  definitionId?: string;
}
export interface Data3 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload2;
  scope?: string;
}
export interface AppManagementUpdated {
  data?: Data3;
}
export interface Data4 {
  appEventName?: string;
  contentfulAppId?: string;
  contentfulEventId?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface AppsLifecycleEvent {
  data?: Data4;
}
export interface AssetCreated {
  asset_id?: string;
  environment?: string;
  space_id?: string;
  version?: string;
}
export interface Data5 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Record<string, any>;
  scope?: string;
  spaceId?: string;
}
export interface AssetListAddAssetMultiple {
  data?: Data5;
}
export interface Data6 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Record<string, any>;
  scope?: string;
  spaceId?: string;
}
export interface AssetListAddAssetSingle {
  data?: Data6;
}
export interface AssetPublished {
  asset_id?: string;
  environment?: string;
  space_id?: string;
  version?: string;
}
export interface Data7 {
  action?: string;
  executingUserId?: string;
  numEditedEntries?: number;
  numPublishedEntries?: number;
  organizationId?: string;
  parentEntryId?: string;
  refCount?: number;
  spaceId?: string;
}
export interface BulkEditorClose {
  data?: Data7;
}
export interface Data8 {
  action?: string;
  entryId?: string;
  executingUserId?: string;
  organizationId?: string;
  parentEntryId?: string;
  refCount?: number;
  spaceId?: string;
}
export interface BulkEditorEditInEntryEditor {
  data?: Data8;
}
export interface Data9 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  parentEntryId?: string;
  refCount?: number;
  spaceId?: string;
}
export interface BulkEditorOpen {
  data?: Data9;
}
export interface Data10 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  parentEntryId?: string;
  refCount?: number;
  spaceId?: string;
}
export interface BulkEditorOpenSlideIn {
  data?: Data10;
}
export interface EditorLoaded {
  /**
   * `init` is triggered every time a slide is loaded. `entity_loaded` is triggered when the editor's main entity is loaded. `sharejs_connected` is triggered when a connection with ShareJS has been established while in case ShareJS is not used for the editor, the more generic `doc_connected` is triggered. `links_rendered` is triggered when all the links (references, media, and rich text embeds / entry hyperlinks) in a slide have been fetched and rendered. `fully_interactive` is trigger when both the links have rendered and the entry has become editable (i.e. ShareJS has connected).
   */
  action?: string;
  executing_user_id?: string;
  /**
   * The total number of links (reference links, media field assets, rich text embedded block and inline entries, rich text embedded block assets, and rich text hyperlinked entries) in the entry on initial load
   */
  link_count?: number;
  /**
   * The overall number of reference and media field instances in an individual entry (1 locale field = 1 instance)
   */
  link_field_editor_instance_count?: number;
  /**
   * Number of milliseconds since the initial load of the entry
   */
  load_ms?: number;
  organization_id?: string;
  /**
   * The overall number of rich text editor instances in an individual entry (1 locale field editor = 1 instance)
   */
  rich_text_editor_instance_count?: number;
  /**
   * Level of the entry editor within the slides (zero-indexed, -1 if the slide was closed at the time the event is triggered)
   */
  slide_level?: number;
  /**
   * ID uniquely identifying the slide instance - does NOT uniquely identify the entry
   */
  slide_uuid?: string;
  /**
   * ID uniquely identifying the overall session and therefore all slides loaded around the same time within the same browser tab
   */
  slides_controller_uuid?: string;
  space_id?: string;
  /**
   * The total number of slides open when the entry is initially loaded, default = 0 if there are no slides
   */
  total_slide_count?: number;
}
export interface Payload3 {
  tabName?: string;
}
export interface Data11 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload3;
  scope?: string;
  spaceId?: string;
}
export interface EditorWorkbenchTabOpen {
  data?: Data11;
}
export interface Data12 {
  elementId?: string;
  executingUserId?: string;
  fromState?: string;
  groupId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface ElementClick {
  contexts?: any[];
  data?: Data12;
}
export interface Data13 {
  autoConflictResolutionVersion?: number;
  entityId?: string;
  entityType?: string;
  executingUserId?: string;
  isConflictAutoResolvable?: boolean;
  localChangesFieldPaths?: string[];
  localEntityLastFetchedAtTstamp?: string;
  localEntityUpdatedAtTstamp?: string;
  localEntityVersion?: number;
  organizationId?: string;
  remoteChangesSinceLocalEntityFieldPaths?: string[];
  remoteEntityUpdatedAtTstamp?: string;
  remoteEntityUpdatedByUserId?: string;
  remoteEntityVersion?: number;
  spaceId?: string;
}
export interface EntityEditorEditConflict {
  data?: Data13;
  schema?: string;
}
export interface Data14 {
  action?: string;
  contentTypeId?: string;
  entryId?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
  version?: number;
}
export interface ContextsItem {
  data?: Data14;
  schema?: string;
}
export interface Data15 {
  entryCtEntryReferenceFieldsCount?: number;
  entryId?: string;
  eventOrigin?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface EntryCreate {
  contexts?: ContextsItem[];
  data?: Data15;
}
export interface Data16 {
  action?: string;
  contentTypeId?: string;
  entryId?: string;
  executingUserId?: string;
  hasLegacyExtensions?: boolean;
  isDefault?: boolean;
  organizationId?: string;
  spaceId?: string;
  version?: number;
  widgets?: any | null;
}
export interface ContextsItem1 {
  data?: Data16;
  schema?: string;
}
export interface Data17 {
  entryCtEntryReferenceFieldsCount?: number;
  entryId?: string;
  eventOrigin?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface EntryPublish {
  contexts?: ContextsItem1[];
  data?: Data17;
}
export interface Data18 {
  contentTypeId?: string;
  contentTypeName?: string;
  extensionDefinitionId?: any | null;
  extensionId?: string;
  extensionName?: string;
  hasLegacyExtensions?: boolean;
  installationParams?: any[];
  instanceParams?: any[];
  isDefault?: boolean;
  location?: string;
  parentEntryId?: string;
  src?: any | null;
  widgets?: any | null;
}
export interface ContextsItem2 {
  data?: Data18;
  schema?: string;
}
export interface Data19 {
  contentTypeId?: string;
  contentTypeName?: string;
  editorType?: string;
  entryId?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface EntryEditorView {
  contexts?: ContextsItem2[];
  data?: Data19;
}
export interface Payload4 {
  circularReferencesCount?: number;
  entityId?: string;
  referencesDepth?: number;
  referencesPerLevel?: number[];
}
export interface Data20 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload4;
  scope?: string;
  spaceId?: string;
}
export interface EntryReferencesDialogOpen {
  data?: Data20;
}
export interface Payload5 {
  entityId?: string;
  referencesCount?: number;
}
export interface Data21 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload5;
  scope?: string;
  spaceId?: string;
}
export interface EntryReferencesPublish {
  data?: Data21;
}
export interface Payload6 {
  entityId?: string;
  referencesCount?: number;
}
export interface Data22 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload6;
  scope?: string;
  spaceId?: string;
}
export interface EntryReferencesValidate {
  data?: Data22;
}
export interface Data23 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface ContextsItem3 {
  data?: Data23;
  schema?: string;
}
export interface GlobalAppLoaded {
  contexts?: ContextsItem3[];
  data?: Record<string, any>;
}
export interface Data24 {
  action?: string;
  executingUserId?: string;
  name?: string;
  organizationId?: string;
  purpose?: string;
  spaceId?: string;
}
export interface GlobalDialog {
  data?: Data24;
  schema?: string;
}
export interface Data25 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Record<string, any>;
  scope?: string;
  spaceId?: string;
}
export interface GlobalSpaceChanged {
  data?: Data25;
}
export interface Data26 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Record<string, any>;
  scope?: string;
}
export interface GlobalSpaceLeft {
  data?: Data26;
}
export interface FromStateParams {
  acceptedPermissions?: any | null;
  addToContext?: boolean;
  apiKeyId?: string;
  appId?: any | null;
  assetId?: string;
  contentTypeId?: string;
  definitionId?: string;
  entryId?: string;
  environmentId?: string;
  ignoreLeaveConfirmation?: boolean;
  invitationId?: string;
  jumpToRole?: string;
  localeId?: string;
  orgId?: any | null;
  orgOwnerOrAdmin?: any | null;
  pathSuffix?: string;
  referrer?: any | null;
  spaceId?: string;
  tab?: string;
  templateId?: any | null;
  userId?: string;
  webhookId?: string;
}
export interface ToStateParams {
  acceptedPermissions?: any | null;
  addToContext?: boolean;
  apiKeyId?: string;
  appId?: any | null;
  assetId?: string;
  contentTypeId?: string;
  definitionId?: string;
  entryId?: string;
  environmentId?: string;
  ignoreLeaveConfirmation?: boolean;
  jumpToRole?: string;
  localeId?: string;
  orgId?: string;
  orgOwnerOrAdmin?: any | null;
  pathSuffix?: string;
  referrer?: any | null;
  spaceId?: string;
  tab?: string;
  templateId?: any | null;
  userId?: string;
  webhookId?: string;
}
export interface Data27 {
  executingUserId?: string;
  fromState?: string;
  fromStateParams?: FromStateParams;
  organizationId?: string;
  spaceId?: string;
  toState?: string;
  toStateParams?: ToStateParams;
}
export interface GlobalStateChanged {
  data?: Data27;
}
export interface Payload7 {
  dialogAction?: string;
  dialogSessionId?: string;
  entityId?: string;
  entityType?: string;
  incomingLinksCount?: number;
}
export interface Data28 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload7;
  scope?: string;
  spaceId?: string;
}
export interface IncomingLinksDialogConfirm {
  data?: Data28;
}
export interface Payload8 {
  dialogAction?: string;
  dialogSessionId?: string;
  entityId?: string;
  entityType?: string;
  incomingLinksCount?: number;
}
export interface Data29 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload8;
  scope?: string;
  spaceId?: string;
}
export interface IncomingLinksDialogOpen {
  data?: Data29;
}
export interface Payload9 {
  entityId?: string;
  entityType?: string;
  incomingLinkIds?: string[];
  incomingLinksCount?: number;
}
export interface Data30 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload9;
  scope?: string;
  spaceId?: string;
}
export interface IncomingLinksQuery {
  data?: Data30;
}
export interface Data31 {
  action?: string;
  executingUserId?: string;
  jobId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface JobsCancel {
  data?: Data31;
  schema?: string;
}
export interface Data32 {
  action?: string;
  entityId?: string;
  executingUserId?: string;
  jobId?: string;
  localTimezone?: string;
  organizationId?: string;
  scheduledFor?: string;
  scheduledForTimezone?: string;
  spaceId?: string;
  timezoneOffset?: number;
}
export interface JobsCreate {
  data?: Data32;
  schema?: string;
}
export interface Payload10 {
  stateName?: string;
  value?: number;
}
export interface Data33 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload10;
  scope?: string;
  spaceId?: string;
}
export interface PerfDomContentLoaded {
  data?: Data33;
}
export interface Payload11 {
  stateName?: string;
  value?: number;
}
export interface Data34 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload11;
  scope?: string;
  spaceId?: string;
}
export interface PerfFirstContentfulPaint {
  data?: Data34;
}
export interface Payload12 {
  stateName?: string;
  value?: number;
}
export interface Data35 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload12;
  scope?: string;
  spaceId?: string;
}
export interface PerfTimeToInteractive {
  data?: Data35;
}
export interface Data36 {
  action?: string;
  executingUserId?: string;
  personalAccessTokenId?: string;
}
export interface PersonalAccessTokenAction {
  data?: Data36;
}
export interface ReleaseCreated {
  environment_key: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}
export interface ReleaseDialogBox {
  action: string;
  environment_key: string;
  organization_key: string;
  purpose: string;
  space_key: string;
}
export interface ReleaseEntityAdded {
  asset_count: number;
  entry_count: number;
  environment_key: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}
export interface ReleaseEntityRemoved {
  entity_id: string;
  entity_type: string;
  environment_key: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}
export interface ReleasePublished {
  asset_count: number;
  entry_count: number;
  environment_key: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}
export interface ReleaseScheduleCanceled {
  environment_key: string;
  job_id: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}
export interface ReleaseScheduleCreated {
  action: string;
  asset_count: number;
  entry_count: number;
  environment_key: string;
  job_id: string;
  organization_key: string;
  release_id: string;
  scheduled_for: number;
  space_key: string;
}
export interface ReleaseTrashed {
  environment_key: string;
  organization_key: string;
  release_id: string;
  space_key: string;
}
export interface Data37 {
  entityType?: string;
  executingUserId?: string;
  index?: number;
  organizationId?: string;
  resultCount?: number;
  searchFilters?: string[];
  searchQuery?: string;
  sequenceKey?: string;
  spaceId?: string;
}
export interface SearchEntryClicked {
  data?: Data37;
}
export interface Data38 {
  entityType?: string;
  executingUserId?: string;
  filter?: string;
  organizationId?: string;
  resultCount?: number;
  searchFilters?: string[];
  searchQuery?: string;
  sequenceKey?: string;
  spaceId?: string;
}
export interface SearchFilterAdded {
  data?: Data38;
}
export interface Data39 {
  entityType?: string;
  executingUserId?: string;
  filter?: string;
  organizationId?: string;
  resultCount?: number;
  searchFilters?: string[];
  searchQuery?: string;
  sequenceKey?: string;
  spaceId?: string;
}
export interface SearchFilterRemoved {
  data?: Data39;
}
export interface Data40 {
  entityType?: string;
  executingUserId?: string;
  organizationId?: string;
  resultCount?: number;
  searchFilters?: string[];
  searchQuery?: string;
  sequenceKey?: string;
  spaceId?: string;
}
export interface SearchQueryChanged {
  data?: Data40;
}
export interface Data41 {
  contentTypeId?: any | null;
  entityType?: string;
  executingUserId?: string;
  organizationId?: string;
  resultCount?: number;
  searchFilters?: string[];
  searchQuery?: string;
  sequenceKey?: string;
  spaceId?: string;
}
export interface SearchSearchPerformed {
  data?: Data41;
}
export interface Data42 {
  contentTypeId?: any | null;
  entityType?: string;
  executingUserId?: string;
  folderId?: string;
  folderTitle?: string;
  organizationId?: string;
  searchFilters?: string[];
  searchQuery?: string;
  spaceId?: string;
  viewId?: string;
  viewType?: string;
}
export interface SearchViewCreated {
  data?: Data42;
}
export interface Data43 {
  entityType?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
  viewId?: string;
  viewType?: string;
}
export interface SearchViewDeleted {
  data?: Data43;
}
export interface Data44 {
  contentTypeId?: any | null;
  entityType?: string;
  executingUserId?: string;
  organizationId?: string;
  resultCount?: number;
  searchFilters?: string[];
  searchQuery?: string;
  sequenceKey?: string;
  spaceId?: string;
  viewId?: string;
  viewRoles?: any | null;
  viewTitle?: string;
  viewType?: string;
}
export interface SearchViewLoaded {
  data?: Data44;
}
export interface Payload13 {
  cmaEntityVersion?: number;
  entityId?: string;
  entityType?: string;
  shareJsDocCompressedVersion?: number;
  shareJsDocVersion?: number;
}
export interface Data45 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload13;
  scope?: string;
  spaceId?: string;
}
export interface SharejsCmaEntityVersionMismatch {
  data?: Data45;
}
export interface Data46 {
  action?: string;
  currentSlideLevel?: number;
  executingUserId?: string;
  organizationId?: string;
  peekHoverTimeMs?: number;
  spaceId?: string;
  targetSlideLevel?: number;
}
export interface SlideInEditorArrowBack {
  data?: Data46;
}
export interface Data47 {
  action?: string;
  currentSlideLevel?: number;
  executingUserId?: string;
  organizationId?: string;
  peekHoverTimeMs?: number;
  spaceId?: string;
  targetSlideLevel?: number;
}
export interface SlideInEditorDelete {
  data?: Data47;
}
export interface Data48 {
  action?: string;
  currentSlideLevel?: number;
  executingUserId?: string;
  organizationId?: string;
  peekHoverTimeMs?: number;
  spaceId?: string;
  targetSlideLevel?: number;
}
export interface SlideInEditorOpen {
  data?: Data48;
}
export interface Data49 {
  action?: string;
  currentSlideLevel?: number;
  executingUserId?: string;
  organizationId?: string;
  peekHoverTimeMs?: number;
  spaceId?: string;
  targetSlideLevel?: number;
}
export interface SlideInEditorOpenCreate {
  data?: Data49;
}
export interface Data50 {
  action?: string;
  currentSlideLevel?: number;
  executingUserId?: string;
  organizationId?: string;
  peekHoverTimeMs?: number;
  spaceId?: string;
  targetSlideLevel?: number;
}
export interface SlideInEditorPeekClick {
  data?: Data50;
}
export interface Data51 {
  action?: string;
  executingUserId?: string;
  name?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface ContextsItem4 {
  data?: Data51;
  schema?: string;
}
export interface SpaceCreate {
  contexts?: ContextsItem4[];
  data?: Record<string, any>;
}
export interface Data52 {
  action?: string;
  currentProductType?: any | null;
  currentSpaceType?: any | null;
  currentStep?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  organizationId?: string;
  paymentDetailsExist?: any | null;
  recommendedProductType?: any | null;
  recommendedSpaceType?: any | null;
  spaceId?: string;
  targetProductType?: any | null;
  targetSpaceName?: any | null;
  targetSpaceTemplateId?: any | null;
  targetSpaceType?: any | null;
  targetStep?: any | null;
}
export interface SpaceWizardCancel {
  data?: Data52;
}
export interface Data53 {
  action?: string;
  currentProductType?: any | null;
  currentSpaceType?: any | null;
  currentStep?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  organizationId?: string;
  paymentDetailsExist?: any | null;
  recommendedProductType?: any | null;
  recommendedSpaceType?: any | null;
  spaceId?: string;
  targetProductType?: any | null;
  targetSpaceName?: any | null;
  targetSpaceTemplateId?: any | null;
  targetSpaceType?: any | null;
  targetStep?: any | null;
}
export interface SpaceWizardConfirm {
  data?: Data53;
}
export interface Data54 {
  action?: string;
  currentProductType?: any | null;
  currentSpaceType?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  paymentDetailsExist?: any | null;
  recommendedProductType?: any | null;
  targetProductType?: any | null;
  targetSpaceName?: string;
}
export interface SpaceWizardEnteredDetails {
  data?: Data54;
}
export interface Data55 {
  currentProductType?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  organizationId?: string;
  paymentDetailsExist?: any | null;
  targetProductType?: any | null;
  targetSpaceName?: any | null;
  targetSpaceType?: any | null;
  targetStep?: any | null;
}
export interface SpaceWizardLinkClick {
  data?: Data55;
}
export interface Data56 {
  action?: string;
  currentProductType?: any | null;
  currentSpaceType?: any | null;
  currentStep?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  organizationId?: string;
  paymentDetailsExist?: any | null;
  recommendedProductType?: any | null;
  recommendedSpaceType?: any | null;
  spaceId?: string;
  targetProductType?: any | null;
  targetSpaceName?: any | null;
  targetSpaceTemplateId?: any | null;
  targetSpaceType?: any | null;
  targetStep?: string;
}
export interface SpaceWizardNavigate {
  data?: Data56;
}
export interface Data57 {
  action?: string;
  currentProductType?: any | null;
  currentSpaceType?: any | null;
  currentStep?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  organizationId?: string;
  paymentDetailsExist?: boolean;
  recommendedProductType?: any | null;
  recommendedSpaceType?: any | null;
  spaceId?: string;
  targetProductType?: any | null;
  targetSpaceName?: any | null;
  targetSpaceTemplateId?: any | null;
  targetSpaceType?: any | null;
  targetStep?: any | null;
}
export interface SpaceWizardOpen {
  data?: Data57;
}
export interface Data58 {
  action?: string;
  currentProductType?: any | null;
  currentSpaceType?: any | null;
  currentStep?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  organizationId?: string;
  paymentDetailsExist?: any | null;
  recommendedProductType?: any | null;
  recommendedSpaceType?: any | null;
  spaceId?: string;
  targetProductType?: string;
  targetSpaceName?: any | null;
  targetSpaceTemplateId?: any | null;
  targetSpaceType?: string;
  targetStep?: any | null;
}
export interface SpaceWizardSelectPlan {
  data?: Data58;
}
export interface Data59 {
  currentProductType?: any | null;
  currentStep?: any | null;
  executingUserId?: string;
  organizationId?: string;
  recommendedProductType?: any | null;
  recommendedSpaceType?: any | null;
  targetSpaceName?: any | null;
  targetSpaceTemplateId?: any | null;
  targetSpaceType?: any | null;
}
export interface SpaceWizardSpaceCreate {
  data?: Data59;
}
export interface Data60 {
  action?: string;
  currentProductType?: any | null;
  currentSpaceType?: any | null;
  currentStep?: any | null;
  executingUserId?: string;
  intendedAction?: string;
  organizationId?: string;
  paymentDetailsExist?: any | null;
  recommendedProductType?: any | null;
  recommendedSpaceType?: any | null;
  spaceId?: string;
  targetProductType?: any | null;
  targetSpaceName?: any | null;
  targetSpaceTemplateId?: any | null;
  targetSpaceType?: any | null;
  targetStep?: any | null;
}
export interface SpaceWizardSpaceTypeChange {
  data?: Data60;
}
export interface Payload14 {
  numErr?: number;
  numSuccess?: number;
}
export interface Data61 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload14;
  scope?: string;
  spaceId?: string;
}
export interface TeamsInSpaceUsersAdded {
  data?: Data61;
}
export interface AdditionalData {
  characterCountAfter?: number;
  characterCountBefore?: number;
  characterCountSelection?: number;
  linkType?: string;
  markType?: string;
  nodeType?: string;
}
export interface Data62 {
  action?: string;
  actionOrigin?: string;
  additionalData?: AdditionalData;
  characterCountAfter?: number;
  characterCountBefore?: any | null;
  characterCountSelection?: any | null;
  contentTypeId?: string;
  editorName?: string;
  entryId?: string;
  executingUserId?: string;
  fieldId?: string;
  fieldLocale?: string;
  isFullscreen?: boolean;
  organizationId?: string;
  spaceId?: string;
}
export interface TextEditorAction {
  data?: Data62;
  schema?: string;
}
export interface Payload15 {
  event?: string;
}
export interface Data63 {
  action?: string;
  executingUserId?: string;
  organizationId?: string;
  payload?: Payload15;
  scope?: string;
  spaceId?: string;
}
export interface TrackingInvalidEvent {
  data?: Data63;
}
export interface Data64 {
  action?: string;
  currentMode?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface TranslationSidebarChangeFocusedLocale {
  data?: Data64;
}
export interface Data65 {
  action?: string;
  currentActiveLocaleCount?: number;
  currentMode?: string;
  executingUserId?: string;
  organizationId?: string;
  previousActiveLocaleCount?: number;
  spaceId?: string;
}
export interface TranslationSidebarDeselectActiveLocale {
  data?: Data65;
}
export interface Data66 {
  action?: string;
  currentMode?: string;
  executingUserId?: string;
  organizationId?: string;
  spaceId?: string;
}
export interface TranslationSidebarToggleWidgetMode {
  data?: Data66;
}
export interface Data67 {
  action?: string;
  currentActiveLocaleCount?: number;
  currentMode?: string;
  executingUserId?: string;
  organizationId?: string;
  previousActiveLocaleCount?: number;
  spaceId?: string;
}
export interface TranslationSidebarUpdateActiveLocales {
  data?: Data67;
}

export type ViolationHandler = (
  message: Record<string, any>,
  violations: Ajv.ErrorObject[]
) => void;

/**
 * The default handler that is fired if none is supplied with setTypewriterOptions.
 * This handler will log a warning message to the console.
 */
export const defaultValidationErrorHandler: ViolationHandler = (message, violations) => {
  const msg = JSON.stringify(
    {
      type: 'Typewriter JSON Schema Validation Error',
      description:
        `You made an analytics call (${message.event}) using Typewriter that doesn't match the ` +
        'Tracking Plan spec.',
      errors: violations,
    },
    undefined,
    2
  );

  console.warn(msg);
};

let onViolation = defaultValidationErrorHandler;

let analytics: () => SegmentAnalytics.AnalyticsJS | undefined = () => {
  return window.analytics;
};

/** Options to customize the runtime behavior of a Typewriter client. */
export interface TypewriterOptions {
  /**
   * Underlying analytics instance where analytics calls are forwarded on to.
   * Defaults to window.analytics.
   */
  analytics?: SegmentAnalytics.AnalyticsJS;
  /**
   * Handler fired when if an event does not match its spec. This handler
   * does not fire in production mode, because it requires inlining the full
   * JSON Schema spec for each event in your Tracking Plan.
   *
   * By default, it will throw errors if NODE_ENV = "test" so that tests will fail
   * if a message does not match the spec. Otherwise, errors will be logged to stderr.
   */
  onViolation?: ViolationHandler;
}

/**
 * Updates the run-time configuration of this Typewriter client.
 *
 * @param {TypewriterOptions} options - the options to upsert
 *
 * @typedef {Object} TypewriterOptions
 * @property {Segment.AnalyticsJS} [analytics] - Underlying analytics instance where analytics
 * 		calls are forwarded on to. Defaults to window.analytics.
 * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
 * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
 * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
 * 		will be logged to stderr.
 */
export function setTypewriterOptions(options: TypewriterOptions) {
  analytics = options.analytics ? () => options.analytics || window.analytics : analytics;
  onViolation = options.onViolation || onViolation;
}

/**
 * Validates a message against a JSON Schema using Ajv. If the message
 * is invalid, the `onViolation` handler will be called.
 */
function validateAgainstSchema(message: Record<string, any>, schema: object) {
  const ajv = new Ajv({ schemaId: 'auto', allErrors: true, verbose: true });
  ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));
  ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-04.json'));

  if (!ajv.validate(schema, message) && ajv.errors) {
    onViolation(message, ajv.errors);
  }
}

/**
 * Helper to attach metadata on Typewriter to outbound requests.
 * This is used for attribution and debugging by the Segment team.
 */
function withTypewriterContext(message: Segment.Options = {}): Segment.Options {
  return {
    ...message,
    context: {
      ...(message.context || {}),
      typewriter: {
        language: 'typescript',
        version: '7.4.1',
      },
    },
  };
}

/**
 * @typedef PageViewed
 * @property {any | null} [accepted_permissions] -
 * @property {boolean} [add_to_context] -
 * @property {string} [api_key_id] -
 * @property {any | null} [app_id] -
 * @property {string} [asset_id] -
 * @property {string} [content_type_id] -
 * @property {string} [definition_id] -
 * @property {string} [entry_id] -
 * @property {string} [environment_id] -
 * @property {boolean} [ignore_leave_confirmation] -
 * @property {string} [jump_to_role] -
 * @property {string} [locale_id] -
 * @property {string} [name] -
 * @property {string} [org_id] -
 * @property {any | null} [org_owner_or_admin] -
 * @property {string} [path] -
 * @property {string} [path_suffix] -
 * @property {string} [previous_entries] -
 * @property {string} [referrer] -
 * @property {string} [search] -
 * @property {string} [space_id] -
 * @property {string} [tab] -
 * @property {any | null} [template_id] -
 * @property {string} [title] -
 * @property {string} [url] -
 * @property {string} [user_id] -
 * @property {string} [webhook_id] -
 */
/**
 * @typedef Payload
 * @property {boolean} [hasInaccessibleTasks] -
 * @property {number} [numPendingTasks] -
 * @property {number} [numVisiblePendingTasks] -
 */
/**
 * @typedef Data
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef AccountDropdownPendingTasksFetched
 * @property {Data} [data] -
 */
/**
 * @typedef Data1
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef ApiKeyClipboardCopy
 * @property {Data1} [data] -
 */
/**
 * @typedef Payload1
 * @property {string} [definitionId] -
 */
/**
 * @typedef Data2
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload1} [payload] -
 * @property {string} [scope] -
 */
/**
 * @typedef AppManagementCreated
 * @property {Data2} [data] -
 */
/**
 * @typedef Payload2
 * @property {string} [definitionId] -
 */
/**
 * @typedef Data3
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload2} [payload] -
 * @property {string} [scope] -
 */
/**
 * @typedef AppManagementUpdated
 * @property {Data3} [data] -
 */
/**
 * @typedef Data4
 * @property {string} [appEventName] -
 * @property {string} [contentfulAppId] -
 * @property {string} [contentfulEventId] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef AppsLifecycleEvent
 * @property {Data4} [data] -
 */
/**
 * @typedef AssetCreated
 * @property {string} [asset_id] -
 * @property {string} [environment] -
 * @property {string} [space_id] -
 * @property {string} [version] -
 */
/**
 * @typedef Data5
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Record<string, any>} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef AssetListAddAssetMultiple
 * @property {Data5} [data] -
 */
/**
 * @typedef Data6
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Record<string, any>} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef AssetListAddAssetSingle
 * @property {Data6} [data] -
 */
/**
 * @typedef AssetPublished
 * @property {string} [asset_id] -
 * @property {string} [environment] -
 * @property {string} [space_id] -
 * @property {string} [version] -
 */
/**
 * @typedef Data7
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {number} [numEditedEntries] -
 * @property {number} [numPublishedEntries] -
 * @property {string} [organizationId] -
 * @property {string} [parentEntryId] -
 * @property {number} [refCount] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef BulkEditorClose
 * @property {Data7} [data] -
 */
/**
 * @typedef Data8
 * @property {string} [action] -
 * @property {string} [entryId] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [parentEntryId] -
 * @property {number} [refCount] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef BulkEditorEditInEntryEditor
 * @property {Data8} [data] -
 */
/**
 * @typedef Data9
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [parentEntryId] -
 * @property {number} [refCount] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef BulkEditorOpen
 * @property {Data9} [data] -
 */
/**
 * @typedef Data10
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [parentEntryId] -
 * @property {number} [refCount] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef BulkEditorOpenSlideIn
 * @property {Data10} [data] -
 */
/**
 * @typedef EditorLoaded
 * @property {string} [action] - `init` is triggered every time a slide is loaded. `entity_loaded` is triggered when the editor's main entity is loaded. `sharejs_connected` is triggered when a connection with ShareJS has been established while in case ShareJS is not used for the editor, the more generic `doc_connected` is triggered. `links_rendered` is triggered when all the links (references, media, and rich text embeds / entry hyperlinks) in a slide have been fetched and rendered. `fully_interactive` is trigger when both the links have rendered and the entry has become editable (i.e. ShareJS has connected).
 * @property {string} [executing_user_id] -
 * @property {number} [link_count] - The total number of links (reference links, media field assets, rich text embedded block and inline entries, rich text embedded block assets, and rich text hyperlinked entries) in the entry on initial load
 * @property {number} [link_field_editor_instance_count] - The overall number of reference and media field instances in an individual entry (1 locale field = 1 instance)
 * @property {number} [load_ms] - Number of milliseconds since the initial load of the entry
 * @property {string} [organization_id] -
 * @property {number} [rich_text_editor_instance_count] - The overall number of rich text editor instances in an individual entry (1 locale field editor = 1 instance)
 * @property {number} [slide_level] - Level of the entry editor within the slides (zero-indexed, -1 if the slide was closed at the time the event is triggered)
 * @property {string} [slide_uuid] - ID uniquely identifying the slide instance - does NOT uniquely identify the entry
 * @property {string} [slides_controller_uuid] - ID uniquely identifying the overall session and therefore all slides loaded around the same time within the same browser tab
 * @property {string} [space_id] -
 * @property {number} [total_slide_count] - The total number of slides open when the entry is initially loaded, default = 0 if there are no slides
 */
/**
 * @typedef Payload3
 * @property {string} [tabName] -
 */
/**
 * @typedef Data11
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload3} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EditorWorkbenchTabOpen
 * @property {Data11} [data] -
 */
/**
 * @typedef Data12
 * @property {string} [elementId] -
 * @property {string} [executingUserId] -
 * @property {string} [fromState] -
 * @property {string} [groupId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef ElementClick
 * @property {any[]} [contexts] -
 * @property {Data12} [data] -
 */
/**
 * @typedef Data13
 * @property {number} [autoConflictResolutionVersion] -
 * @property {string} [entityId] -
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {boolean} [isConflictAutoResolvable] -
 * @property {string[]} [localChangesFieldPaths] -
 * @property {string} [localEntityLastFetchedAtTstamp] -
 * @property {string} [localEntityUpdatedAtTstamp] -
 * @property {number} [localEntityVersion] -
 * @property {string} [organizationId] -
 * @property {string[]} [remoteChangesSinceLocalEntityFieldPaths] -
 * @property {string} [remoteEntityUpdatedAtTstamp] -
 * @property {string} [remoteEntityUpdatedByUserId] -
 * @property {number} [remoteEntityVersion] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EntityEditorEditConflict
 * @property {Data13} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Data14
 * @property {string} [action] -
 * @property {string} [contentTypeId] -
 * @property {string} [entryId] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 * @property {number} [version] -
 */
/**
 * @typedef ContextsItem
 * @property {Data14} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Data15
 * @property {number} [entryCtEntryReferenceFieldsCount] -
 * @property {string} [entryId] -
 * @property {string} [eventOrigin] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EntryCreate
 * @property {ContextsItem[]} [contexts] -
 * @property {Data15} [data] -
 */
/**
 * @typedef Data16
 * @property {string} [action] -
 * @property {string} [contentTypeId] -
 * @property {string} [entryId] -
 * @property {string} [executingUserId] -
 * @property {boolean} [hasLegacyExtensions] -
 * @property {boolean} [isDefault] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 * @property {number} [version] -
 * @property {any | null} [widgets] -
 */
/**
 * @typedef ContextsItem1
 * @property {Data16} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Data17
 * @property {number} [entryCtEntryReferenceFieldsCount] -
 * @property {string} [entryId] -
 * @property {string} [eventOrigin] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EntryPublish
 * @property {ContextsItem1[]} [contexts] -
 * @property {Data17} [data] -
 */
/**
 * @typedef Data18
 * @property {string} [contentTypeId] -
 * @property {string} [contentTypeName] -
 * @property {any | null} [extensionDefinitionId] -
 * @property {string} [extensionId] -
 * @property {string} [extensionName] -
 * @property {boolean} [hasLegacyExtensions] -
 * @property {any[]} [installationParams] -
 * @property {any[]} [instanceParams] -
 * @property {boolean} [isDefault] -
 * @property {string} [location] -
 * @property {string} [parentEntryId] -
 * @property {any | null} [src] -
 * @property {any | null} [widgets] -
 */
/**
 * @typedef ContextsItem2
 * @property {Data18} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Data19
 * @property {string} [contentTypeId] -
 * @property {string} [contentTypeName] -
 * @property {string} [editorType] -
 * @property {string} [entryId] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EntryEditorView
 * @property {ContextsItem2[]} [contexts] -
 * @property {Data19} [data] -
 */
/**
 * @typedef Payload4
 * @property {number} [circularReferencesCount] -
 * @property {string} [entityId] -
 * @property {number} [referencesDepth] -
 * @property {number[]} [referencesPerLevel] -
 */
/**
 * @typedef Data20
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload4} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EntryReferencesDialogOpen
 * @property {Data20} [data] -
 */
/**
 * @typedef Payload5
 * @property {string} [entityId] -
 * @property {number} [referencesCount] -
 */
/**
 * @typedef Data21
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload5} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EntryReferencesPublish
 * @property {Data21} [data] -
 */
/**
 * @typedef Payload6
 * @property {string} [entityId] -
 * @property {number} [referencesCount] -
 */
/**
 * @typedef Data22
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload6} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef EntryReferencesValidate
 * @property {Data22} [data] -
 */
/**
 * @typedef Data23
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef ContextsItem3
 * @property {Data23} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef GlobalAppLoaded
 * @property {ContextsItem3[]} [contexts] -
 * @property {Record<string, any>} [data] -
 */
/**
 * @typedef Data24
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [name] -
 * @property {string} [organizationId] -
 * @property {string} [purpose] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef GlobalDialog
 * @property {Data24} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Data25
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Record<string, any>} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef GlobalSpaceChanged
 * @property {Data25} [data] -
 */
/**
 * @typedef Data26
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Record<string, any>} [payload] -
 * @property {string} [scope] -
 */
/**
 * @typedef GlobalSpaceLeft
 * @property {Data26} [data] -
 */
/**
 * @typedef FromStateParams
 * @property {any | null} [acceptedPermissions] -
 * @property {boolean} [addToContext] -
 * @property {string} [apiKeyId] -
 * @property {any | null} [appId] -
 * @property {string} [assetId] -
 * @property {string} [contentTypeId] -
 * @property {string} [definitionId] -
 * @property {string} [entryId] -
 * @property {string} [environmentId] -
 * @property {boolean} [ignoreLeaveConfirmation] -
 * @property {string} [invitationId] -
 * @property {string} [jumpToRole] -
 * @property {string} [localeId] -
 * @property {any | null} [orgId] -
 * @property {any | null} [orgOwnerOrAdmin] -
 * @property {string} [pathSuffix] -
 * @property {any | null} [referrer] -
 * @property {string} [spaceId] -
 * @property {string} [tab] -
 * @property {any | null} [templateId] -
 * @property {string} [userId] -
 * @property {string} [webhookId] -
 */
/**
 * @typedef ToStateParams
 * @property {any | null} [acceptedPermissions] -
 * @property {boolean} [addToContext] -
 * @property {string} [apiKeyId] -
 * @property {any | null} [appId] -
 * @property {string} [assetId] -
 * @property {string} [contentTypeId] -
 * @property {string} [definitionId] -
 * @property {string} [entryId] -
 * @property {string} [environmentId] -
 * @property {boolean} [ignoreLeaveConfirmation] -
 * @property {string} [jumpToRole] -
 * @property {string} [localeId] -
 * @property {string} [orgId] -
 * @property {any | null} [orgOwnerOrAdmin] -
 * @property {string} [pathSuffix] -
 * @property {any | null} [referrer] -
 * @property {string} [spaceId] -
 * @property {string} [tab] -
 * @property {any | null} [templateId] -
 * @property {string} [userId] -
 * @property {string} [webhookId] -
 */
/**
 * @typedef Data27
 * @property {string} [executingUserId] -
 * @property {string} [fromState] -
 * @property {FromStateParams} [fromStateParams] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 * @property {string} [toState] -
 * @property {ToStateParams} [toStateParams] -
 */
/**
 * @typedef GlobalStateChanged
 * @property {Data27} [data] -
 */
/**
 * @typedef Payload7
 * @property {string} [dialogAction] -
 * @property {string} [dialogSessionId] -
 * @property {string} [entityId] -
 * @property {string} [entityType] -
 * @property {number} [incomingLinksCount] -
 */
/**
 * @typedef Data28
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload7} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef IncomingLinksDialogConfirm
 * @property {Data28} [data] -
 */
/**
 * @typedef Payload8
 * @property {string} [dialogAction] -
 * @property {string} [dialogSessionId] -
 * @property {string} [entityId] -
 * @property {string} [entityType] -
 * @property {number} [incomingLinksCount] -
 */
/**
 * @typedef Data29
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload8} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef IncomingLinksDialogOpen
 * @property {Data29} [data] -
 */
/**
 * @typedef Payload9
 * @property {string} [entityId] -
 * @property {string} [entityType] -
 * @property {string[]} [incomingLinkIds] -
 * @property {number} [incomingLinksCount] -
 */
/**
 * @typedef Data30
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload9} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef IncomingLinksQuery
 * @property {Data30} [data] -
 */
/**
 * @typedef Data31
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [jobId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef JobsCancel
 * @property {Data31} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Data32
 * @property {string} [action] -
 * @property {string} [entityId] -
 * @property {string} [executingUserId] -
 * @property {string} [jobId] -
 * @property {string} [localTimezone] -
 * @property {string} [organizationId] -
 * @property {string} [scheduledFor] -
 * @property {string} [scheduledForTimezone] -
 * @property {string} [spaceId] -
 * @property {number} [timezoneOffset] -
 */
/**
 * @typedef JobsCreate
 * @property {Data32} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Payload10
 * @property {string} [stateName] -
 * @property {number} [value] -
 */
/**
 * @typedef Data33
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload10} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef PerfDomContentLoaded
 * @property {Data33} [data] -
 */
/**
 * @typedef Payload11
 * @property {string} [stateName] -
 * @property {number} [value] -
 */
/**
 * @typedef Data34
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload11} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef PerfFirstContentfulPaint
 * @property {Data34} [data] -
 */
/**
 * @typedef Payload12
 * @property {string} [stateName] -
 * @property {number} [value] -
 */
/**
 * @typedef Data35
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload12} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef PerfTimeToInteractive
 * @property {Data35} [data] -
 */
/**
 * @typedef Data36
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [personalAccessTokenId] -
 */
/**
 * @typedef PersonalAccessTokenAction
 * @property {Data36} [data] -
 */
/**
 * @typedef ReleaseCreated
 * @property {string} environment_key -
 * @property {string} organization_key -
 * @property {string} release_id -
 * @property {string} space_key -
 */
/**
 * @typedef ReleaseDialogBox
 * @property {string} action -
 * @property {string} environment_key -
 * @property {string} organization_key -
 * @property {string} purpose -
 * @property {string} space_key -
 */
/**
 * @typedef ReleaseEntityAdded
 * @property {number} asset_count -
 * @property {number} entry_count -
 * @property {string} environment_key -
 * @property {string} organization_key -
 * @property {string} release_id -
 * @property {string} space_key -
 */
/**
 * @typedef ReleaseEntityRemoved
 * @property {string} entity_id -
 * @property {string} entity_type -
 * @property {string} environment_key -
 * @property {string} organization_key -
 * @property {string} release_id -
 * @property {string} space_key -
 */
/**
 * @typedef ReleasePublished
 * @property {number} asset_count -
 * @property {number} entry_count -
 * @property {string} environment_key -
 * @property {string} organization_key -
 * @property {string} release_id -
 * @property {string} space_key -
 */
/**
 * @typedef ReleaseScheduleCanceled
 * @property {string} environment_key -
 * @property {string} job_id -
 * @property {string} organization_key -
 * @property {string} release_id -
 * @property {string} space_key -
 */
/**
 * @typedef ReleaseScheduleCreated
 * @property {string} action -
 * @property {number} asset_count -
 * @property {number} entry_count -
 * @property {string} environment_key -
 * @property {string} job_id -
 * @property {string} organization_key -
 * @property {string} release_id -
 * @property {number} scheduled_for -
 * @property {string} space_key -
 */
/**
 * @typedef ReleaseTrashed
 * @property {string} environment_key -
 * @property {string} organization_key -
 * @property {string} release_id -
 * @property {string} space_key -
 */
/**
 * @typedef Data37
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {number} [index] -
 * @property {string} [organizationId] -
 * @property {number} [resultCount] -
 * @property {string[]} [searchFilters] -
 * @property {string} [searchQuery] -
 * @property {string} [sequenceKey] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef SearchEntryClicked
 * @property {Data37} [data] -
 */
/**
 * @typedef Data38
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {string} [filter] -
 * @property {string} [organizationId] -
 * @property {number} [resultCount] -
 * @property {string[]} [searchFilters] -
 * @property {string} [searchQuery] -
 * @property {string} [sequenceKey] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef SearchFilterAdded
 * @property {Data38} [data] -
 */
/**
 * @typedef Data39
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {string} [filter] -
 * @property {string} [organizationId] -
 * @property {number} [resultCount] -
 * @property {string[]} [searchFilters] -
 * @property {string} [searchQuery] -
 * @property {string} [sequenceKey] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef SearchFilterRemoved
 * @property {Data39} [data] -
 */
/**
 * @typedef Data40
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [resultCount] -
 * @property {string[]} [searchFilters] -
 * @property {string} [searchQuery] -
 * @property {string} [sequenceKey] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef SearchQueryChanged
 * @property {Data40} [data] -
 */
/**
 * @typedef Data41
 * @property {any | null} [contentTypeId] -
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [resultCount] -
 * @property {string[]} [searchFilters] -
 * @property {string} [searchQuery] -
 * @property {string} [sequenceKey] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef SearchSearchPerformed
 * @property {Data41} [data] -
 */
/**
 * @typedef Data42
 * @property {any | null} [contentTypeId] -
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {string} [folderId] -
 * @property {string} [folderTitle] -
 * @property {string} [organizationId] -
 * @property {string[]} [searchFilters] -
 * @property {string} [searchQuery] -
 * @property {string} [spaceId] -
 * @property {string} [viewId] -
 * @property {string} [viewType] -
 */
/**
 * @typedef SearchViewCreated
 * @property {Data42} [data] -
 */
/**
 * @typedef Data43
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 * @property {string} [viewId] -
 * @property {string} [viewType] -
 */
/**
 * @typedef SearchViewDeleted
 * @property {Data43} [data] -
 */
/**
 * @typedef Data44
 * @property {any | null} [contentTypeId] -
 * @property {string} [entityType] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [resultCount] -
 * @property {string[]} [searchFilters] -
 * @property {string} [searchQuery] -
 * @property {string} [sequenceKey] -
 * @property {string} [spaceId] -
 * @property {string} [viewId] -
 * @property {any | null} [viewRoles] -
 * @property {string} [viewTitle] -
 * @property {string} [viewType] -
 */
/**
 * @typedef SearchViewLoaded
 * @property {Data44} [data] -
 */
/**
 * @typedef Payload13
 * @property {number} [cmaEntityVersion] -
 * @property {string} [entityId] -
 * @property {string} [entityType] -
 * @property {number} [shareJsDocCompressedVersion] -
 * @property {number} [shareJsDocVersion] -
 */
/**
 * @typedef Data45
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload13} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef SharejsCmaEntityVersionMismatch
 * @property {Data45} [data] -
 */
/**
 * @typedef Data46
 * @property {string} [action] -
 * @property {number} [currentSlideLevel] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [peekHoverTimeMs] -
 * @property {string} [spaceId] -
 * @property {number} [targetSlideLevel] -
 */
/**
 * @typedef SlideInEditorArrowBack
 * @property {Data46} [data] -
 */
/**
 * @typedef Data47
 * @property {string} [action] -
 * @property {number} [currentSlideLevel] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [peekHoverTimeMs] -
 * @property {string} [spaceId] -
 * @property {number} [targetSlideLevel] -
 */
/**
 * @typedef SlideInEditorDelete
 * @property {Data47} [data] -
 */
/**
 * @typedef Data48
 * @property {string} [action] -
 * @property {number} [currentSlideLevel] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [peekHoverTimeMs] -
 * @property {string} [spaceId] -
 * @property {number} [targetSlideLevel] -
 */
/**
 * @typedef SlideInEditorOpen
 * @property {Data48} [data] -
 */
/**
 * @typedef Data49
 * @property {string} [action] -
 * @property {number} [currentSlideLevel] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [peekHoverTimeMs] -
 * @property {string} [spaceId] -
 * @property {number} [targetSlideLevel] -
 */
/**
 * @typedef SlideInEditorOpenCreate
 * @property {Data49} [data] -
 */
/**
 * @typedef Data50
 * @property {string} [action] -
 * @property {number} [currentSlideLevel] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [peekHoverTimeMs] -
 * @property {string} [spaceId] -
 * @property {number} [targetSlideLevel] -
 */
/**
 * @typedef SlideInEditorPeekClick
 * @property {Data50} [data] -
 */
/**
 * @typedef Data51
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [name] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef ContextsItem4
 * @property {Data51} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef SpaceCreate
 * @property {ContextsItem4[]} [contexts] -
 * @property {Record<string, any>} [data] -
 */
/**
 * @typedef Data52
 * @property {string} [action] -
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentSpaceType] -
 * @property {any | null} [currentStep] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {string} [organizationId] -
 * @property {any | null} [paymentDetailsExist] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [recommendedSpaceType] -
 * @property {string} [spaceId] -
 * @property {any | null} [targetProductType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceTemplateId] -
 * @property {any | null} [targetSpaceType] -
 * @property {any | null} [targetStep] -
 */
/**
 * @typedef SpaceWizardCancel
 * @property {Data52} [data] -
 */
/**
 * @typedef Data53
 * @property {string} [action] -
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentSpaceType] -
 * @property {any | null} [currentStep] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {string} [organizationId] -
 * @property {any | null} [paymentDetailsExist] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [recommendedSpaceType] -
 * @property {string} [spaceId] -
 * @property {any | null} [targetProductType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceTemplateId] -
 * @property {any | null} [targetSpaceType] -
 * @property {any | null} [targetStep] -
 */
/**
 * @typedef SpaceWizardConfirm
 * @property {Data53} [data] -
 */
/**
 * @typedef Data54
 * @property {string} [action] -
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentSpaceType] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {any | null} [paymentDetailsExist] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [targetProductType] -
 * @property {string} [targetSpaceName] -
 */
/**
 * @typedef SpaceWizardEnteredDetails
 * @property {Data54} [data] -
 */
/**
 * @typedef Data55
 * @property {any | null} [currentProductType] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {string} [organizationId] -
 * @property {any | null} [paymentDetailsExist] -
 * @property {any | null} [targetProductType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceType] -
 * @property {any | null} [targetStep] -
 */
/**
 * @typedef SpaceWizardLinkClick
 * @property {Data55} [data] -
 */
/**
 * @typedef Data56
 * @property {string} [action] -
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentSpaceType] -
 * @property {any | null} [currentStep] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {string} [organizationId] -
 * @property {any | null} [paymentDetailsExist] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [recommendedSpaceType] -
 * @property {string} [spaceId] -
 * @property {any | null} [targetProductType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceTemplateId] -
 * @property {any | null} [targetSpaceType] -
 * @property {string} [targetStep] -
 */
/**
 * @typedef SpaceWizardNavigate
 * @property {Data56} [data] -
 */
/**
 * @typedef Data57
 * @property {string} [action] -
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentSpaceType] -
 * @property {any | null} [currentStep] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {string} [organizationId] -
 * @property {boolean} [paymentDetailsExist] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [recommendedSpaceType] -
 * @property {string} [spaceId] -
 * @property {any | null} [targetProductType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceTemplateId] -
 * @property {any | null} [targetSpaceType] -
 * @property {any | null} [targetStep] -
 */
/**
 * @typedef SpaceWizardOpen
 * @property {Data57} [data] -
 */
/**
 * @typedef Data58
 * @property {string} [action] -
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentSpaceType] -
 * @property {any | null} [currentStep] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {string} [organizationId] -
 * @property {any | null} [paymentDetailsExist] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [recommendedSpaceType] -
 * @property {string} [spaceId] -
 * @property {string} [targetProductType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceTemplateId] -
 * @property {string} [targetSpaceType] -
 * @property {any | null} [targetStep] -
 */
/**
 * @typedef SpaceWizardSelectPlan
 * @property {Data58} [data] -
 */
/**
 * @typedef Data59
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentStep] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [recommendedSpaceType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceTemplateId] -
 * @property {any | null} [targetSpaceType] -
 */
/**
 * @typedef SpaceWizardSpaceCreate
 * @property {Data59} [data] -
 */
/**
 * @typedef Data60
 * @property {string} [action] -
 * @property {any | null} [currentProductType] -
 * @property {any | null} [currentSpaceType] -
 * @property {any | null} [currentStep] -
 * @property {string} [executingUserId] -
 * @property {string} [intendedAction] -
 * @property {string} [organizationId] -
 * @property {any | null} [paymentDetailsExist] -
 * @property {any | null} [recommendedProductType] -
 * @property {any | null} [recommendedSpaceType] -
 * @property {string} [spaceId] -
 * @property {any | null} [targetProductType] -
 * @property {any | null} [targetSpaceName] -
 * @property {any | null} [targetSpaceTemplateId] -
 * @property {any | null} [targetSpaceType] -
 * @property {any | null} [targetStep] -
 */
/**
 * @typedef SpaceWizardSpaceTypeChange
 * @property {Data60} [data] -
 */
/**
 * @typedef Payload14
 * @property {number} [numErr] -
 * @property {number} [numSuccess] -
 */
/**
 * @typedef Data61
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload14} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef TeamsInSpaceUsersAdded
 * @property {Data61} [data] -
 */
/**
 * @typedef AdditionalData
 * @property {number} [characterCountAfter] -
 * @property {number} [characterCountBefore] -
 * @property {number} [characterCountSelection] -
 * @property {string} [linkType] -
 * @property {string} [markType] -
 * @property {string} [nodeType] -
 */
/**
 * @typedef Data62
 * @property {string} [action] -
 * @property {string} [actionOrigin] -
 * @property {AdditionalData} [additionalData] -
 * @property {number} [characterCountAfter] -
 * @property {any | null} [characterCountBefore] -
 * @property {any | null} [characterCountSelection] -
 * @property {string} [contentTypeId] -
 * @property {string} [editorName] -
 * @property {string} [entryId] -
 * @property {string} [executingUserId] -
 * @property {string} [fieldId] -
 * @property {string} [fieldLocale] -
 * @property {boolean} [isFullscreen] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef TextEditorAction
 * @property {Data62} [data] -
 * @property {string} [schema] -
 */
/**
 * @typedef Payload15
 * @property {string} [event] -
 */
/**
 * @typedef Data63
 * @property {string} [action] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {Payload15} [payload] -
 * @property {string} [scope] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef TrackingInvalidEvent
 * @property {Data63} [data] -
 */
/**
 * @typedef Data64
 * @property {string} [action] -
 * @property {string} [currentMode] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef TranslationSidebarChangeFocusedLocale
 * @property {Data64} [data] -
 */
/**
 * @typedef Data65
 * @property {string} [action] -
 * @property {number} [currentActiveLocaleCount] -
 * @property {string} [currentMode] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [previousActiveLocaleCount] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef TranslationSidebarDeselectActiveLocale
 * @property {Data65} [data] -
 */
/**
 * @typedef Data66
 * @property {string} [action] -
 * @property {string} [currentMode] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef TranslationSidebarToggleWidgetMode
 * @property {Data66} [data] -
 */
/**
 * @typedef Data67
 * @property {string} [action] -
 * @property {number} [currentActiveLocaleCount] -
 * @property {string} [currentMode] -
 * @property {string} [executingUserId] -
 * @property {string} [organizationId] -
 * @property {number} [previousActiveLocaleCount] -
 * @property {string} [spaceId] -
 */
/**
 * @typedef TranslationSidebarUpdateActiveLocales
 * @property {Data67} [data] -
 */

/**
 * Fires a 'Page Viewed' track call.
 *
 * @param {PageViewed} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function pageViewed(
  props?: PageViewed,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          accepted_permissions: {},
          add_to_context: {
            type: ['boolean'],
          },
          api_key_id: {
            type: ['string'],
          },
          app_id: {},
          asset_id: {
            type: ['string'],
          },
          content_type_id: {
            type: ['string'],
          },
          definition_id: {
            type: ['string'],
          },
          entry_id: {
            type: ['string'],
          },
          environment_id: {
            type: ['string'],
          },
          ignore_leave_confirmation: {
            type: ['boolean'],
          },
          jump_to_role: {
            type: ['string'],
          },
          locale_id: {
            type: ['string'],
          },
          name: {
            type: ['string'],
          },
          org_id: {
            type: ['string'],
          },
          org_owner_or_admin: {},
          path: {
            type: ['string'],
          },
          path_suffix: {
            type: ['string'],
          },
          previous_entries: {
            type: ['string'],
          },
          referrer: {
            type: ['string'],
          },
          search: {
            type: ['string'],
          },
          space_id: {
            type: ['string'],
          },
          tab: {
            type: ['string'],
          },
          template_id: {},
          title: {
            type: ['string'],
          },
          url: {
            type: ['string'],
          },
          user_id: {
            type: ['string'],
          },
          webhook_id: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'Page Viewed',
    type: 'object',
  };
  const message = {
    event: 'Page Viewed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('Page Viewed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'account_dropdown:pending_tasks_fetched' track call.
 *
 * @param {AccountDropdownPendingTasksFetched} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function accountDropdownPendingTasksFetched(
  props?: AccountDropdownPendingTasksFetched,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  hasInaccessibleTasks: {
                    type: ['boolean'],
                  },
                  numPendingTasks: {
                    type: ['integer'],
                  },
                  numVisiblePendingTasks: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'account_dropdown:pending_tasks_fetched',
    type: 'object',
  };
  const message = {
    event: 'account_dropdown:pending_tasks_fetched',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'account_dropdown:pending_tasks_fetched',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}
/**
 * Fires a 'api_key:clipboard_copy' track call.
 *
 * @param {ApiKeyClipboardCopy} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function apiKeyClipboardCopy(
  props?: ApiKeyClipboardCopy,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'api_key:clipboard_copy',
    type: 'object',
  };
  const message = {
    event: 'api_key:clipboard_copy',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('api_key:clipboard_copy', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'app_management:created' track call.
 *
 * @param {AppManagementCreated} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function appManagementCreated(
  props?: AppManagementCreated,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  definitionId: {
                    type: ['string'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'app_management:created',
    type: 'object',
  };
  const message = {
    event: 'app_management:created',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('app_management:created', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'app_management:updated' track call.
 *
 * @param {AppManagementUpdated} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function appManagementUpdated(
  props?: AppManagementUpdated,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  definitionId: {
                    type: ['string'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'app_management:updated',
    type: 'object',
  };
  const message = {
    event: 'app_management:updated',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('app_management:updated', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'apps:lifecycle_event' track call.
 *
 * @param {AppsLifecycleEvent} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function appsLifecycleEvent(
  props?: AppsLifecycleEvent,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              appEventName: {
                type: ['string'],
              },
              contentfulAppId: {
                type: ['string'],
              },
              contentfulEventId: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'apps:lifecycle_event',
    type: 'object',
  };
  const message = {
    event: 'apps:lifecycle_event',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('apps:lifecycle_event', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'asset_created' track call.
 *
 * @param {AssetCreated} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function assetCreated(
  props?: AssetCreated,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          asset_id: {
            type: ['string'],
          },
          environment: {
            type: ['string'],
          },
          space_id: {
            type: ['string'],
          },
          version: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'asset_created',
    type: 'object',
  };
  const message = {
    event: 'asset_created',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('asset_created', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'asset_list:add_asset_multiple' track call.
 *
 * @param {AssetListAddAssetMultiple} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function assetListAddAssetMultiple(
  props?: AssetListAddAssetMultiple,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                type: ['object'],
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'asset_list:add_asset_multiple',
    type: 'object',
  };
  const message = {
    event: 'asset_list:add_asset_multiple',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('asset_list:add_asset_multiple', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'asset_list:add_asset_single' track call.
 *
 * @param {AssetListAddAssetSingle} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function assetListAddAssetSingle(
  props?: AssetListAddAssetSingle,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                type: ['object'],
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'asset_list:add_asset_single',
    type: 'object',
  };
  const message = {
    event: 'asset_list:add_asset_single',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('asset_list:add_asset_single', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'asset_published' track call.
 *
 * @param {AssetPublished} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function assetPublished(
  props?: AssetPublished,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          asset_id: {
            type: ['string'],
          },
          environment: {
            type: ['string'],
          },
          space_id: {
            type: ['string'],
          },
          version: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'asset_published',
    type: 'object',
  };
  const message = {
    event: 'asset_published',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('asset_published', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'bulk_editor:close' track call.
 *
 * @param {BulkEditorClose} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function bulkEditorClose(
  props?: BulkEditorClose,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              numEditedEntries: {
                type: ['integer'],
              },
              numPublishedEntries: {
                type: ['integer'],
              },
              organizationId: {
                type: ['string'],
              },
              parentEntryId: {
                type: ['string'],
              },
              refCount: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'bulk_editor:close',
    type: 'object',
  };
  const message = {
    event: 'bulk_editor:close',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('bulk_editor:close', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'bulk_editor:edit_in_entry_editor' track call.
 *
 * @param {BulkEditorEditInEntryEditor} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function bulkEditorEditInEntryEditor(
  props?: BulkEditorEditInEntryEditor,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              entryId: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              parentEntryId: {
                type: ['string'],
              },
              refCount: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'bulk_editor:edit_in_entry_editor',
    type: 'object',
  };
  const message = {
    event: 'bulk_editor:edit_in_entry_editor',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'bulk_editor:edit_in_entry_editor',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}
/**
 * Fires a 'bulk_editor:open' track call.
 *
 * @param {BulkEditorOpen} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function bulkEditorOpen(
  props?: BulkEditorOpen,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              parentEntryId: {
                type: ['string'],
              },
              refCount: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'bulk_editor:open',
    type: 'object',
  };
  const message = {
    event: 'bulk_editor:open',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('bulk_editor:open', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'bulk_editor:open_slide_in' track call.
 *
 * @param {BulkEditorOpenSlideIn} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function bulkEditorOpenSlideIn(
  props?: BulkEditorOpenSlideIn,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              parentEntryId: {
                type: ['string'],
              },
              refCount: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'bulk_editor:open_slide_in',
    type: 'object',
  };
  const message = {
    event: 'bulk_editor:open_slide_in',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('bulk_editor:open_slide_in', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'editor_loaded' track call.
 *
 * @param {EditorLoaded} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function editorLoaded(
  props?: EditorLoaded,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          action: {
            description:
              "`init` is triggered every time a slide is loaded. `entity_loaded` is triggered when the editor's main entity is loaded. `sharejs_connected` is triggered when a connection with ShareJS has been established while in case ShareJS is not used for the editor, the more generic `doc_connected` is triggered. `links_rendered` is triggered when all the links (references, media, and rich text embeds / entry hyperlinks) in a slide have been fetched and rendered. `fully_interactive` is trigger when both the links have rendered and the entry has become editable (i.e. ShareJS has connected).",
            enum: [
              'init',
              'entity_loaded',
              'sharejs_connected',
              'doc_connected',
              'links_rendered',
              'fully_interactive',
            ],
            type: ['string'],
          },
          executing_user_id: {
            type: ['string'],
          },
          link_count: {
            description:
              'The total number of links (reference links, media field assets, rich text embedded block and inline entries, rich text embedded block assets, and rich text hyperlinked entries) in the entry on initial load',
            type: ['integer'],
          },
          link_field_editor_instance_count: {
            description:
              'The overall number of reference and media field instances in an individual entry (1 locale field = 1 instance)',
            type: ['integer'],
          },
          load_ms: {
            description: 'Number of milliseconds since the initial load of the entry',
            type: ['integer'],
          },
          organization_id: {
            type: ['string'],
          },
          rich_text_editor_instance_count: {
            description:
              'The overall number of rich text editor instances in an individual entry (1 locale field editor = 1 instance)',
            type: ['integer'],
          },
          slide_level: {
            description:
              'Level of the entry editor within the slides (zero-indexed, -1 if the slide was closed at the time the event is triggered)',
            type: ['integer'],
          },
          slide_uuid: {
            description:
              'ID uniquely identifying the slide instance - does NOT uniquely identify the entry',
            type: ['string'],
          },
          slides_controller_uuid: {
            description:
              'ID uniquely identifying the overall session and therefore all slides loaded around the same time within the same browser tab',
            type: ['string'],
          },
          space_id: {
            type: ['string'],
          },
          total_slide_count: {
            description:
              'The total number of slides open when the entry is initially loaded, default = 0 if there are no slides',
            type: ['integer'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'editor_loaded',
    type: 'object',
  };
  const message = {
    event: 'editor_loaded',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('editor_loaded', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'editor_workbench:tab_open' track call.
 *
 * @param {EditorWorkbenchTabOpen} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function editorWorkbenchTabOpen(
  props?: EditorWorkbenchTabOpen,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  tabName: {
                    type: ['string'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'editor_workbench:tab_open',
    type: 'object',
  };
  const message = {
    event: 'editor_workbench:tab_open',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('editor_workbench:tab_open', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'element:click' track call.
 *
 * @param {ElementClick} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function elementClick(
  props?: ElementClick,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          contexts: {
            type: ['array'],
          },
          data: {
            properties: {
              elementId: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              fromState: {
                type: ['string'],
              },
              groupId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'element:click',
    type: 'object',
  };
  const message = {
    event: 'element:click',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('element:click', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'entity_editor:edit_conflict' track call.
 *
 * @param {EntityEditorEditConflict} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function entityEditorEditConflict(
  props?: EntityEditorEditConflict,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              autoConflictResolutionVersion: {
                type: ['integer'],
              },
              entityId: {
                type: ['string'],
              },
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              isConflictAutoResolvable: {
                type: ['boolean'],
              },
              localChangesFieldPaths: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              localEntityLastFetchedAtTstamp: {
                type: ['string'],
              },
              localEntityUpdatedAtTstamp: {
                type: ['string'],
              },
              localEntityVersion: {
                type: ['integer'],
              },
              organizationId: {
                type: ['string'],
              },
              remoteChangesSinceLocalEntityFieldPaths: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              remoteEntityUpdatedAtTstamp: {
                type: ['string'],
              },
              remoteEntityUpdatedByUserId: {
                type: ['string'],
              },
              remoteEntityVersion: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
          schema: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'entity_editor:edit_conflict',
    type: 'object',
  };
  const message = {
    event: 'entity_editor:edit_conflict',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('entity_editor:edit_conflict', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'entry:create' track call.
 *
 * @param {EntryCreate} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function entryCreate(
  props?: EntryCreate,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          contexts: {
            items: {
              properties: {
                data: {
                  properties: {
                    action: {
                      type: ['string'],
                    },
                    contentTypeId: {
                      type: ['string'],
                    },
                    entryId: {
                      type: ['string'],
                    },
                    executingUserId: {
                      type: ['string'],
                    },
                    organizationId: {
                      type: ['string'],
                    },
                    spaceId: {
                      type: ['string'],
                    },
                    version: {
                      type: ['integer'],
                    },
                  },
                  type: 'object',
                },
                schema: {
                  type: ['string'],
                },
              },
              type: 'object',
            },
            type: 'array',
          },
          data: {
            properties: {
              entryCtEntryReferenceFieldsCount: {
                type: ['integer'],
              },
              entryId: {
                type: ['string'],
              },
              eventOrigin: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'entry:create',
    type: 'object',
  };
  const message = {
    event: 'entry:create',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('entry:create', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'entry:publish' track call.
 *
 * @param {EntryPublish} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function entryPublish(
  props?: EntryPublish,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          contexts: {
            items: {
              properties: {
                data: {
                  properties: {
                    action: {
                      type: ['string'],
                    },
                    contentTypeId: {
                      type: ['string'],
                    },
                    entryId: {
                      type: ['string'],
                    },
                    executingUserId: {
                      type: ['string'],
                    },
                    hasLegacyExtensions: {
                      type: ['boolean'],
                    },
                    isDefault: {
                      type: ['boolean'],
                    },
                    organizationId: {
                      type: ['string'],
                    },
                    spaceId: {
                      type: ['string'],
                    },
                    version: {
                      type: ['integer'],
                    },
                    widgets: {},
                  },
                  type: 'object',
                },
                schema: {
                  type: ['string'],
                },
              },
              type: 'object',
            },
            type: 'array',
          },
          data: {
            properties: {
              entryCtEntryReferenceFieldsCount: {
                type: ['integer'],
              },
              entryId: {
                type: ['string'],
              },
              eventOrigin: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'entry:publish',
    type: 'object',
  };
  const message = {
    event: 'entry:publish',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('entry:publish', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'entry_editor:view' track call.
 *
 * @param {EntryEditorView} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function entryEditorView(
  props?: EntryEditorView,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          contexts: {
            items: {
              properties: {
                data: {
                  properties: {
                    contentTypeId: {
                      type: ['string'],
                    },
                    contentTypeName: {
                      type: ['string'],
                    },
                    extensionDefinitionId: {},
                    extensionId: {
                      type: ['string'],
                    },
                    extensionName: {
                      type: ['string'],
                    },
                    hasLegacyExtensions: {
                      type: ['boolean'],
                    },
                    installationParams: {
                      type: ['array'],
                    },
                    instanceParams: {
                      type: ['array'],
                    },
                    isDefault: {
                      type: ['boolean'],
                    },
                    location: {
                      type: ['string'],
                    },
                    parentEntryId: {
                      type: ['string'],
                    },
                    src: {},
                    widgets: {},
                  },
                  type: 'object',
                },
                schema: {
                  type: ['string'],
                },
              },
              type: 'object',
            },
            type: 'array',
          },
          data: {
            properties: {
              contentTypeId: {
                type: ['string'],
              },
              contentTypeName: {
                type: ['string'],
              },
              editorType: {
                type: ['string'],
              },
              entryId: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'entry_editor:view',
    type: 'object',
  };
  const message = {
    event: 'entry_editor:view',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('entry_editor:view', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'entry_references:dialog_open' track call.
 *
 * @param {EntryReferencesDialogOpen} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function entryReferencesDialogOpen(
  props?: EntryReferencesDialogOpen,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  circularReferencesCount: {
                    type: ['integer'],
                  },
                  entityId: {
                    type: ['string'],
                  },
                  referencesDepth: {
                    type: ['integer'],
                  },
                  referencesPerLevel: {
                    items: {
                      type: 'integer',
                    },
                    type: 'array',
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'entry_references:dialog_open',
    type: 'object',
  };
  const message = {
    event: 'entry_references:dialog_open',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('entry_references:dialog_open', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'entry_references:publish' track call.
 *
 * @param {EntryReferencesPublish} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function entryReferencesPublish(
  props?: EntryReferencesPublish,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  entityId: {
                    type: ['string'],
                  },
                  referencesCount: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'entry_references:publish',
    type: 'object',
  };
  const message = {
    event: 'entry_references:publish',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('entry_references:publish', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'entry_references:validate' track call.
 *
 * @param {EntryReferencesValidate} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function entryReferencesValidate(
  props?: EntryReferencesValidate,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  entityId: {
                    type: ['string'],
                  },
                  referencesCount: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'entry_references:validate',
    type: 'object',
  };
  const message = {
    event: 'entry_references:validate',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('entry_references:validate', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'feature_reference_action' track call.
 *
 * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function featureReferenceAction(
  props?: Record<string, any>,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          content_type_id: {
            description:
              'Content type ID of the linked entity the action was performed on. `null` in case of an asset.',
            type: ['string'],
          },
          entity_id: {
            description: 'ID of the linked entity the action was performed on.',
            type: ['string'],
          },
          entity_type: {
            description: 'Type of the linked entity the action was performed on.',
            type: ['string'],
          },
          event_type: {
            description: 'The action performed on the linked entity.',
            type: ['string'],
          },
          executing_user_id: {
            type: ['string'],
          },
          organization_id: {
            type: ['string'],
          },
          parent_entry_id: {
            description:
              'Entry ID of the entry with the field containing the linked entity which the event is about.',
            type: ['string'],
          },
          parent_field_path: {
            description:
              '`${FIELD_ID}:${LOCALE_CODE}` on the `parent_entry_id` that contains the linked  entity which the event is about. ID/code are public CMA identifiers, not internal CF IDs.',
            type: ['string'],
          },
          space_id: {
            type: ['string'],
          },
        },
        required: [
          'content_type_id',
          'entity_id',
          'entity_type',
          'event_type',
          'executing_user_id',
          'organization_id',
          'parent_entry_id',
          'parent_field_path',
          'space_id',
        ],
        type: 'object',
      },
      traits: {},
    },
    title: 'feature_reference_action',
  };
  const message = {
    event: 'feature_reference_action',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('feature_reference_action', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'global:app_loaded' track call.
 *
 * @param {GlobalAppLoaded} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function globalAppLoaded(
  props?: GlobalAppLoaded,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          contexts: {
            items: {
              properties: {
                data: {
                  properties: {
                    action: {
                      type: ['string'],
                    },
                    executingUserId: {
                      type: ['string'],
                    },
                    organizationId: {
                      type: ['string'],
                    },
                    spaceId: {
                      type: ['string'],
                    },
                  },
                  type: 'object',
                },
                schema: {
                  type: ['string'],
                },
              },
              type: 'object',
            },
            type: 'array',
          },
          data: {
            type: ['object'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'global:app_loaded',
    type: 'object',
  };
  const message = {
    event: 'global:app_loaded',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('global:app_loaded', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'global:dialog' track call.
 *
 * @param {GlobalDialog} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function globalDialog(
  props?: GlobalDialog,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              name: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              purpose: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
          schema: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'global:dialog',
    type: 'object',
  };
  const message = {
    event: 'global:dialog',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('global:dialog', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'global:space_changed' track call.
 *
 * @param {GlobalSpaceChanged} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function globalSpaceChanged(
  props?: GlobalSpaceChanged,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                type: ['object'],
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'global:space_changed',
    type: 'object',
  };
  const message = {
    event: 'global:space_changed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('global:space_changed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'global:space_left' track call.
 *
 * @param {GlobalSpaceLeft} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function globalSpaceLeft(
  props?: GlobalSpaceLeft,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                type: ['object'],
              },
              scope: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'global:space_left',
    type: 'object',
  };
  const message = {
    event: 'global:space_left',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('global:space_left', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'global:state_changed' track call.
 *
 * @param {GlobalStateChanged} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function globalStateChanged(
  props?: GlobalStateChanged,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              executingUserId: {
                type: ['string'],
              },
              fromState: {
                type: ['string'],
              },
              fromStateParams: {
                properties: {
                  acceptedPermissions: {},
                  addToContext: {
                    type: ['boolean'],
                  },
                  apiKeyId: {
                    type: ['string'],
                  },
                  appId: {},
                  assetId: {
                    type: ['string'],
                  },
                  contentTypeId: {
                    type: ['string'],
                  },
                  definitionId: {
                    type: ['string'],
                  },
                  entryId: {
                    type: ['string'],
                  },
                  environmentId: {
                    type: ['string'],
                  },
                  ignoreLeaveConfirmation: {
                    type: ['boolean'],
                  },
                  invitationId: {
                    type: ['string'],
                  },
                  jumpToRole: {
                    type: ['string'],
                  },
                  localeId: {
                    type: ['string'],
                  },
                  orgId: {},
                  orgOwnerOrAdmin: {},
                  pathSuffix: {
                    type: ['string'],
                  },
                  referrer: {},
                  spaceId: {
                    type: ['string'],
                  },
                  tab: {
                    type: ['string'],
                  },
                  templateId: {},
                  userId: {
                    type: ['string'],
                  },
                  webhookId: {
                    type: ['string'],
                  },
                },
                type: 'object',
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
              toState: {
                type: ['string'],
              },
              toStateParams: {
                properties: {
                  acceptedPermissions: {},
                  addToContext: {
                    type: ['boolean'],
                  },
                  apiKeyId: {
                    type: ['string'],
                  },
                  appId: {},
                  assetId: {
                    type: ['string'],
                  },
                  contentTypeId: {
                    type: ['string'],
                  },
                  definitionId: {
                    type: ['string'],
                  },
                  entryId: {
                    type: ['string'],
                  },
                  environmentId: {
                    type: ['string'],
                  },
                  ignoreLeaveConfirmation: {
                    type: ['boolean'],
                  },
                  jumpToRole: {
                    type: ['string'],
                  },
                  localeId: {
                    type: ['string'],
                  },
                  orgId: {
                    type: ['string'],
                  },
                  orgOwnerOrAdmin: {},
                  pathSuffix: {
                    type: ['string'],
                  },
                  referrer: {},
                  spaceId: {
                    type: ['string'],
                  },
                  tab: {
                    type: ['string'],
                  },
                  templateId: {},
                  userId: {
                    type: ['string'],
                  },
                  webhookId: {
                    type: ['string'],
                  },
                },
                type: 'object',
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'global:state_changed',
    type: 'object',
  };
  const message = {
    event: 'global:state_changed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('global:state_changed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'incoming_links:dialog_confirm' track call.
 *
 * @param {IncomingLinksDialogConfirm} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function incomingLinksDialogConfirm(
  props?: IncomingLinksDialogConfirm,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  dialogAction: {
                    type: ['string'],
                  },
                  dialogSessionId: {
                    type: ['string'],
                  },
                  entityId: {
                    type: ['string'],
                  },
                  entityType: {
                    type: ['string'],
                  },
                  incomingLinksCount: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'incoming_links:dialog_confirm',
    type: 'object',
  };
  const message = {
    event: 'incoming_links:dialog_confirm',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('incoming_links:dialog_confirm', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'incoming_links:dialog_open' track call.
 *
 * @param {IncomingLinksDialogOpen} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function incomingLinksDialogOpen(
  props?: IncomingLinksDialogOpen,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  dialogAction: {
                    type: ['string'],
                  },
                  dialogSessionId: {
                    type: ['string'],
                  },
                  entityId: {
                    type: ['string'],
                  },
                  entityType: {
                    type: ['string'],
                  },
                  incomingLinksCount: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'incoming_links:dialog_open',
    type: 'object',
  };
  const message = {
    event: 'incoming_links:dialog_open',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('incoming_links:dialog_open', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'incoming_links:query' track call.
 *
 * @param {IncomingLinksQuery} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function incomingLinksQuery(
  props?: IncomingLinksQuery,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  entityId: {
                    type: ['string'],
                  },
                  entityType: {
                    type: ['string'],
                  },
                  incomingLinkIds: {
                    items: {
                      type: 'string',
                    },
                    type: 'array',
                  },
                  incomingLinksCount: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'incoming_links:query',
    type: 'object',
  };
  const message = {
    event: 'incoming_links:query',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('incoming_links:query', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'jobs:cancel' track call.
 *
 * @param {JobsCancel} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function jobsCancel(
  props?: JobsCancel,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              jobId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
          schema: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'jobs:cancel',
    type: 'object',
  };
  const message = {
    event: 'jobs:cancel',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('jobs:cancel', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'jobs:create' track call.
 *
 * @param {JobsCreate} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function jobsCreate(
  props?: JobsCreate,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              entityId: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              jobId: {
                type: ['string'],
              },
              localTimezone: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              scheduledFor: {
                type: ['string'],
              },
              scheduledForTimezone: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
              timezoneOffset: {
                type: ['integer'],
              },
            },
            type: 'object',
          },
          schema: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'jobs:create',
    type: 'object',
  };
  const message = {
    event: 'jobs:create',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('jobs:create', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'perf:dom_content_loaded' track call.
 *
 * @param {PerfDomContentLoaded} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function perfDomContentLoaded(
  props?: PerfDomContentLoaded,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  stateName: {
                    type: ['string'],
                  },
                  value: {
                    type: ['number'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'perf:dom_content_loaded',
    type: 'object',
  };
  const message = {
    event: 'perf:dom_content_loaded',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('perf:dom_content_loaded', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'perf:first_contentful_paint' track call.
 *
 * @param {PerfFirstContentfulPaint} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function perfFirstContentfulPaint(
  props?: PerfFirstContentfulPaint,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  stateName: {
                    type: ['string'],
                  },
                  value: {
                    type: ['number'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'perf:first_contentful_paint',
    type: 'object',
  };
  const message = {
    event: 'perf:first_contentful_paint',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('perf:first_contentful_paint', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'perf:time_to_interactive' track call.
 *
 * @param {PerfTimeToInteractive} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function perfTimeToInteractive(
  props?: PerfTimeToInteractive,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  stateName: {
                    type: ['string'],
                  },
                  value: {
                    type: ['number'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'perf:time_to_interactive',
    type: 'object',
  };
  const message = {
    event: 'perf:time_to_interactive',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('perf:time_to_interactive', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'personal_access_token:action' track call.
 *
 * @param {PersonalAccessTokenAction} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function personalAccessTokenAction(
  props?: PersonalAccessTokenAction,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              personalAccessTokenId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'personal_access_token:action',
    type: 'object',
  };
  const message = {
    event: 'personal_access_token:action',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('personal_access_token:action', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_created' track call.
 *
 * @param {ReleaseCreated} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releaseCreated(
  props: ReleaseCreated,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          environment_key: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          release_id: {
            description: '',
            type: 'string',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: ['environment_key', 'organization_key', 'release_id', 'space_key'],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_created',
    type: 'object',
  };
  const message = {
    event: 'release_created',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_created', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_dialog_box' track call.
 *
 * @param {ReleaseDialogBox} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releaseDialogBox(
  props: ReleaseDialogBox,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          action: {
            description: '',
            pattern: 'open|close',
            type: 'string',
          },
          environment_key: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          purpose: {
            description: '',
            pattern: 'submit|create|cancel',
            type: 'string',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: ['action', 'environment_key', 'organization_key', 'purpose', 'space_key'],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_dialog_box',
    type: 'object',
  };
  const message = {
    event: 'release_dialog_box',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_dialog_box', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_entity_added' track call.
 *
 * @param {ReleaseEntityAdded} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releaseEntityAdded(
  props: ReleaseEntityAdded,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          asset_count: {
            description: '',
            type: 'integer',
          },
          entry_count: {
            description: '',
            type: 'integer',
          },
          environment_key: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          release_id: {
            description: '',
            type: 'string',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: [
          'asset_count',
          'entry_count',
          'environment_key',
          'organization_key',
          'release_id',
          'space_key',
        ],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_entity_added',
    type: 'object',
  };
  const message = {
    event: 'release_entity_added',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_entity_added', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_entity_removed' track call.
 *
 * @param {ReleaseEntityRemoved} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releaseEntityRemoved(
  props: ReleaseEntityRemoved,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          entity_id: {
            description: '',
            type: 'string',
          },
          entity_type: {
            description: '',
            pattern: 'Entry|Asset',
            type: 'string',
          },
          environment_key: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          release_id: {
            description: '',
            type: 'string',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: [
          'entity_id',
          'entity_type',
          'environment_key',
          'organization_key',
          'release_id',
          'space_key',
        ],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_entity_removed',
    type: 'object',
  };
  const message = {
    event: 'release_entity_removed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_entity_removed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_published' track call.
 *
 * @param {ReleasePublished} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releasePublished(
  props: ReleasePublished,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          asset_count: {
            description: '',
            type: 'integer',
          },
          entry_count: {
            description: '',
            type: 'integer',
          },
          environment_key: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          release_id: {
            description: '',
            type: 'string',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: [
          'asset_count',
          'entry_count',
          'environment_key',
          'organization_key',
          'release_id',
          'space_key',
        ],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_published',
    type: 'object',
  };
  const message = {
    event: 'release_published',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_published', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_schedule_canceled' track call.
 *
 * @param {ReleaseScheduleCanceled} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releaseScheduleCanceled(
  props: ReleaseScheduleCanceled,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          environment_key: {
            description: '',
            type: 'string',
          },
          job_id: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          release_id: {
            description: '',
            type: 'string',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: ['environment_key', 'job_id', 'organization_key', 'release_id', 'space_key'],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_schedule_canceled',
    type: 'object',
  };
  const message = {
    event: 'release_schedule_canceled',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_schedule_canceled', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_schedule_created' track call.
 *
 * @param {ReleaseScheduleCreated} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releaseScheduleCreated(
  props: ReleaseScheduleCreated,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          action: {
            description: '',
            pattern: 'publish|unpublish',
            type: 'string',
          },
          asset_count: {
            description: '',
            type: 'integer',
          },
          entry_count: {
            description: '',
            type: 'integer',
          },
          environment_key: {
            description: '',
            type: 'string',
          },
          job_id: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          release_id: {
            description: '',
            type: 'string',
          },
          scheduled_for: {
            description: '',
            type: 'integer',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: [
          'action',
          'asset_count',
          'entry_count',
          'environment_key',
          'job_id',
          'organization_key',
          'release_id',
          'scheduled_for',
          'space_key',
        ],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_schedule_created',
    type: 'object',
  };
  const message = {
    event: 'release_schedule_created',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_schedule_created', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'release_trashed' track call.
 *
 * @param {ReleaseTrashed} props - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function releaseTrashed(
  props: ReleaseTrashed,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    labels: {},
    properties: {
      context: {},
      properties: {
        properties: {
          environment_key: {
            description: '',
            type: 'string',
          },
          organization_key: {
            description: '',
            type: 'string',
          },
          release_id: {
            description: '',
            type: 'string',
          },
          space_key: {
            description: '',
            type: 'string',
          },
        },
        required: ['environment_key', 'organization_key', 'release_id', 'space_key'],
        type: 'object',
      },
      traits: {
        type: 'object',
      },
    },
    required: ['properties'],
    title: 'release_trashed',
    type: 'object',
  };
  const message = {
    event: 'release_trashed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('release_trashed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:entry_clicked' track call.
 *
 * @param {SearchEntryClicked} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchEntryClicked(
  props?: SearchEntryClicked,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              index: {
                type: ['integer'],
              },
              organizationId: {
                type: ['string'],
              },
              resultCount: {
                type: ['integer'],
              },
              searchFilters: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              searchQuery: {
                type: ['string'],
              },
              sequenceKey: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:entry_clicked',
    type: 'object',
  };
  const message = {
    event: 'search:entry_clicked',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:entry_clicked', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:filter_added' track call.
 *
 * @param {SearchFilterAdded} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchFilterAdded(
  props?: SearchFilterAdded,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              filter: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              resultCount: {
                type: ['integer'],
              },
              searchFilters: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              searchQuery: {
                type: ['string'],
              },
              sequenceKey: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:filter_added',
    type: 'object',
  };
  const message = {
    event: 'search:filter_added',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:filter_added', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:filter_removed' track call.
 *
 * @param {SearchFilterRemoved} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchFilterRemoved(
  props?: SearchFilterRemoved,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              filter: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              resultCount: {
                type: ['integer'],
              },
              searchFilters: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              searchQuery: {
                type: ['string'],
              },
              sequenceKey: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:filter_removed',
    type: 'object',
  };
  const message = {
    event: 'search:filter_removed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:filter_removed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:query_changed' track call.
 *
 * @param {SearchQueryChanged} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchQueryChanged(
  props?: SearchQueryChanged,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              resultCount: {
                type: ['integer'],
              },
              searchFilters: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              searchQuery: {
                type: ['string'],
              },
              sequenceKey: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:query_changed',
    type: 'object',
  };
  const message = {
    event: 'search:query_changed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:query_changed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:search_performed' track call.
 *
 * @param {SearchSearchPerformed} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchSearchPerformed(
  props?: SearchSearchPerformed,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              contentTypeId: {},
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              resultCount: {
                type: ['integer'],
              },
              searchFilters: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              searchQuery: {
                type: ['string'],
              },
              sequenceKey: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:search_performed',
    type: 'object',
  };
  const message = {
    event: 'search:search_performed',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:search_performed', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:view_created' track call.
 *
 * @param {SearchViewCreated} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchViewCreated(
  props?: SearchViewCreated,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              contentTypeId: {},
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              folderId: {
                type: ['string'],
              },
              folderTitle: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              searchFilters: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              searchQuery: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
              viewId: {
                type: ['string'],
              },
              viewType: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:view_created',
    type: 'object',
  };
  const message = {
    event: 'search:view_created',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:view_created', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:view_deleted' track call.
 *
 * @param {SearchViewDeleted} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchViewDeleted(
  props?: SearchViewDeleted,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
              viewId: {
                type: ['string'],
              },
              viewType: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:view_deleted',
    type: 'object',
  };
  const message = {
    event: 'search:view_deleted',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:view_deleted', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'search:view_loaded' track call.
 *
 * @param {SearchViewLoaded} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function searchViewLoaded(
  props?: SearchViewLoaded,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              contentTypeId: {},
              entityType: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              resultCount: {
                type: ['integer'],
              },
              searchFilters: {
                items: {
                  type: 'string',
                },
                type: 'array',
              },
              searchQuery: {
                type: ['string'],
              },
              sequenceKey: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
              viewId: {
                type: ['string'],
              },
              viewRoles: {},
              viewTitle: {
                type: ['string'],
              },
              viewType: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'search:view_loaded',
    type: 'object',
  };
  const message = {
    event: 'search:view_loaded',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('search:view_loaded', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'sharejs:cma_entity_version_mismatch' track call.
 *
 * @param {SharejsCmaEntityVersionMismatch} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function sharejsCmaEntityVersionMismatch(
  props?: SharejsCmaEntityVersionMismatch,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  cmaEntityVersion: {
                    type: ['integer'],
                  },
                  entityId: {
                    type: ['string'],
                  },
                  entityType: {
                    type: ['string'],
                  },
                  shareJsDocCompressedVersion: {
                    type: ['integer'],
                  },
                  shareJsDocVersion: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'sharejs:cma_entity_version_mismatch',
    type: 'object',
  };
  const message = {
    event: 'sharejs:cma_entity_version_mismatch',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'sharejs:cma_entity_version_mismatch',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}
/**
 * Fires a 'slide_in_editor:arrow_back' track call.
 *
 * @param {SlideInEditorArrowBack} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function slideInEditorArrowBack(
  props?: SlideInEditorArrowBack,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentSlideLevel: {
                type: ['integer'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              peekHoverTimeMs: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
              targetSlideLevel: {
                type: ['integer'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'slide_in_editor:arrow_back',
    type: 'object',
  };
  const message = {
    event: 'slide_in_editor:arrow_back',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('slide_in_editor:arrow_back', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'slide_in_editor:delete' track call.
 *
 * @param {SlideInEditorDelete} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function slideInEditorDelete(
  props?: SlideInEditorDelete,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentSlideLevel: {
                type: ['integer'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              peekHoverTimeMs: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
              targetSlideLevel: {
                type: ['integer'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'slide_in_editor:delete',
    type: 'object',
  };
  const message = {
    event: 'slide_in_editor:delete',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('slide_in_editor:delete', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'slide_in_editor:open' track call.
 *
 * @param {SlideInEditorOpen} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function slideInEditorOpen(
  props?: SlideInEditorOpen,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentSlideLevel: {
                type: ['integer'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              peekHoverTimeMs: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
              targetSlideLevel: {
                type: ['integer'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'slide_in_editor:open',
    type: 'object',
  };
  const message = {
    event: 'slide_in_editor:open',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('slide_in_editor:open', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'slide_in_editor:open_create' track call.
 *
 * @param {SlideInEditorOpenCreate} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function slideInEditorOpenCreate(
  props?: SlideInEditorOpenCreate,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentSlideLevel: {
                type: ['integer'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              peekHoverTimeMs: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
              targetSlideLevel: {
                type: ['integer'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'slide_in_editor:open_create',
    type: 'object',
  };
  const message = {
    event: 'slide_in_editor:open_create',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('slide_in_editor:open_create', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'slide_in_editor:peek_click' track call.
 *
 * @param {SlideInEditorPeekClick} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function slideInEditorPeekClick(
  props?: SlideInEditorPeekClick,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentSlideLevel: {
                type: ['integer'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              peekHoverTimeMs: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
              targetSlideLevel: {
                type: ['integer'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'slide_in_editor:peek_click',
    type: 'object',
  };
  const message = {
    event: 'slide_in_editor:peek_click',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('slide_in_editor:peek_click', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space:create' track call.
 *
 * @param {SpaceCreate} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceCreate(
  props?: SpaceCreate,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          contexts: {
            items: {
              properties: {
                data: {
                  properties: {
                    action: {
                      type: ['string'],
                    },
                    executingUserId: {
                      type: ['string'],
                    },
                    name: {
                      type: ['string'],
                    },
                    organizationId: {
                      type: ['string'],
                    },
                    spaceId: {
                      type: ['string'],
                    },
                  },
                  type: 'object',
                },
                schema: {
                  type: ['string'],
                },
              },
              type: 'object',
            },
            type: 'array',
          },
          data: {
            type: ['object'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space:create',
    type: 'object',
  };
  const message = {
    event: 'space:create',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space:create', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:cancel' track call.
 *
 * @param {SpaceWizardCancel} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardCancel(
  props?: SpaceWizardCancel,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentProductType: {},
              currentSpaceType: {},
              currentStep: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              paymentDetailsExist: {},
              recommendedProductType: {},
              recommendedSpaceType: {},
              spaceId: {
                type: ['string'],
              },
              targetProductType: {},
              targetSpaceName: {},
              targetSpaceTemplateId: {},
              targetSpaceType: {},
              targetStep: {},
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:cancel',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:cancel',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:cancel', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:confirm' track call.
 *
 * @param {SpaceWizardConfirm} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardConfirm(
  props?: SpaceWizardConfirm,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentProductType: {},
              currentSpaceType: {},
              currentStep: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              paymentDetailsExist: {},
              recommendedProductType: {},
              recommendedSpaceType: {},
              spaceId: {
                type: ['string'],
              },
              targetProductType: {},
              targetSpaceName: {},
              targetSpaceTemplateId: {},
              targetSpaceType: {},
              targetStep: {},
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:confirm',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:confirm',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:confirm', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:entered_details' track call.
 *
 * @param {SpaceWizardEnteredDetails} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardEnteredDetails(
  props?: SpaceWizardEnteredDetails,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentProductType: {},
              currentSpaceType: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              paymentDetailsExist: {},
              recommendedProductType: {},
              targetProductType: {},
              targetSpaceName: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:entered_details',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:entered_details',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:entered_details', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:link_click' track call.
 *
 * @param {SpaceWizardLinkClick} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardLinkClick(
  props?: SpaceWizardLinkClick,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              currentProductType: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              paymentDetailsExist: {},
              targetProductType: {},
              targetSpaceName: {},
              targetSpaceType: {},
              targetStep: {},
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:link_click',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:link_click',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:link_click', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:navigate' track call.
 *
 * @param {SpaceWizardNavigate} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardNavigate(
  props?: SpaceWizardNavigate,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentProductType: {},
              currentSpaceType: {},
              currentStep: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              paymentDetailsExist: {},
              recommendedProductType: {},
              recommendedSpaceType: {},
              spaceId: {
                type: ['string'],
              },
              targetProductType: {},
              targetSpaceName: {},
              targetSpaceTemplateId: {},
              targetSpaceType: {},
              targetStep: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:navigate',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:navigate',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:navigate', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:open' track call.
 *
 * @param {SpaceWizardOpen} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardOpen(
  props?: SpaceWizardOpen,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentProductType: {},
              currentSpaceType: {},
              currentStep: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              paymentDetailsExist: {
                type: ['boolean'],
              },
              recommendedProductType: {},
              recommendedSpaceType: {},
              spaceId: {
                type: ['string'],
              },
              targetProductType: {},
              targetSpaceName: {},
              targetSpaceTemplateId: {},
              targetSpaceType: {},
              targetStep: {},
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:open',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:open',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:open', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:select_plan' track call.
 *
 * @param {SpaceWizardSelectPlan} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardSelectPlan(
  props?: SpaceWizardSelectPlan,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentProductType: {},
              currentSpaceType: {},
              currentStep: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              paymentDetailsExist: {},
              recommendedProductType: {},
              recommendedSpaceType: {},
              spaceId: {
                type: ['string'],
              },
              targetProductType: {
                type: ['string'],
              },
              targetSpaceName: {},
              targetSpaceTemplateId: {},
              targetSpaceType: {
                type: ['string'],
              },
              targetStep: {},
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:select_plan',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:select_plan',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:select_plan', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:space_create' track call.
 *
 * @param {SpaceWizardSpaceCreate} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardSpaceCreate(
  props?: SpaceWizardSpaceCreate,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              currentProductType: {},
              currentStep: {},
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              recommendedProductType: {},
              recommendedSpaceType: {},
              targetSpaceName: {},
              targetSpaceTemplateId: {},
              targetSpaceType: {},
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:space_create',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:space_create',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('space_wizard:space_create', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'space_wizard:space_type_change' track call.
 *
 * @param {SpaceWizardSpaceTypeChange} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function spaceWizardSpaceTypeChange(
  props?: SpaceWizardSpaceTypeChange,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentProductType: {},
              currentSpaceType: {},
              currentStep: {},
              executingUserId: {
                type: ['string'],
              },
              intendedAction: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              paymentDetailsExist: {},
              recommendedProductType: {},
              recommendedSpaceType: {},
              spaceId: {
                type: ['string'],
              },
              targetProductType: {},
              targetSpaceName: {},
              targetSpaceTemplateId: {},
              targetSpaceType: {},
              targetStep: {},
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'space_wizard:space_type_change',
    type: 'object',
  };
  const message = {
    event: 'space_wizard:space_type_change',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'space_wizard:space_type_change',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}
/**
 * Fires a 'teams_in_space:users_added' track call.
 *
 * @param {TeamsInSpaceUsersAdded} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function teamsInSpaceUsersAdded(
  props?: TeamsInSpaceUsersAdded,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  numErr: {
                    type: ['integer'],
                  },
                  numSuccess: {
                    type: ['integer'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'teams_in_space:users_added',
    type: 'object',
  };
  const message = {
    event: 'teams_in_space:users_added',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('teams_in_space:users_added', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'text_editor:action' track call.
 *
 * @param {TextEditorAction} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function textEditorAction(
  props?: TextEditorAction,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              actionOrigin: {
                type: ['string'],
              },
              additionalData: {
                properties: {
                  characterCountAfter: {
                    type: ['integer'],
                  },
                  characterCountBefore: {
                    type: ['integer'],
                  },
                  characterCountSelection: {
                    type: ['integer'],
                  },
                  linkType: {
                    type: ['string'],
                  },
                  markType: {
                    type: ['string'],
                  },
                  nodeType: {
                    type: ['string'],
                  },
                },
                type: 'object',
              },
              characterCountAfter: {
                type: ['integer'],
              },
              characterCountBefore: {},
              characterCountSelection: {},
              contentTypeId: {
                type: ['string'],
              },
              editorName: {
                type: ['string'],
              },
              entryId: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              fieldId: {
                type: ['string'],
              },
              fieldLocale: {
                type: ['string'],
              },
              isFullscreen: {
                type: ['boolean'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
          schema: {
            type: ['string'],
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'text_editor:action',
    type: 'object',
  };
  const message = {
    event: 'text_editor:action',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('text_editor:action', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'tracking:invalid_event' track call.
 *
 * @param {TrackingInvalidEvent} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function trackingInvalidEvent(
  props?: TrackingInvalidEvent,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              payload: {
                properties: {
                  event: {
                    type: ['string'],
                  },
                },
                type: 'object',
              },
              scope: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'tracking:invalid_event',
    type: 'object',
  };
  const message = {
    event: 'tracking:invalid_event',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track('tracking:invalid_event', props || {}, withTypewriterContext(options), callback);
  }
}
/**
 * Fires a 'translation_sidebar:change_focused_locale' track call.
 *
 * @param {TranslationSidebarChangeFocusedLocale} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function translationSidebarChangeFocusedLocale(
  props?: TranslationSidebarChangeFocusedLocale,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentMode: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'translation_sidebar:change_focused_locale',
    type: 'object',
  };
  const message = {
    event: 'translation_sidebar:change_focused_locale',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'translation_sidebar:change_focused_locale',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}
/**
 * Fires a 'translation_sidebar:deselect_active_locale' track call.
 *
 * @param {TranslationSidebarDeselectActiveLocale} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function translationSidebarDeselectActiveLocale(
  props?: TranslationSidebarDeselectActiveLocale,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentActiveLocaleCount: {
                type: ['integer'],
              },
              currentMode: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              previousActiveLocaleCount: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'translation_sidebar:deselect_active_locale',
    type: 'object',
  };
  const message = {
    event: 'translation_sidebar:deselect_active_locale',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'translation_sidebar:deselect_active_locale',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}
/**
 * Fires a 'translation_sidebar:toggle_widget_mode' track call.
 *
 * @param {TranslationSidebarToggleWidgetMode} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function translationSidebarToggleWidgetMode(
  props?: TranslationSidebarToggleWidgetMode,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentMode: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'translation_sidebar:toggle_widget_mode',
    type: 'object',
  };
  const message = {
    event: 'translation_sidebar:toggle_widget_mode',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'translation_sidebar:toggle_widget_mode',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}
/**
 * Fires a 'translation_sidebar:update_active_locales' track call.
 *
 * @param {TranslationSidebarUpdateActiveLocales} [props] - The analytics properties that will be sent to Segment.
 * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
 * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
 * 		call is fired.
 */
export function translationSidebarUpdateActiveLocales(
  props?: TranslationSidebarUpdateActiveLocales,
  options?: Segment.Options,
  callback?: Segment.Callback
): void {
  const schema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    properties: {
      context: {},
      properties: {
        properties: {
          data: {
            properties: {
              action: {
                type: ['string'],
              },
              currentActiveLocaleCount: {
                type: ['integer'],
              },
              currentMode: {
                type: ['string'],
              },
              executingUserId: {
                type: ['string'],
              },
              organizationId: {
                type: ['string'],
              },
              previousActiveLocaleCount: {
                type: ['integer'],
              },
              spaceId: {
                type: ['string'],
              },
            },
            type: 'object',
          },
        },
        type: 'object',
      },
      traits: {},
    },
    title: 'translation_sidebar:update_active_locales',
    type: 'object',
  };
  const message = {
    event: 'translation_sidebar:update_active_locales',
    properties: props || {},
    options,
  };
  validateAgainstSchema(message, schema);

  const a = analytics();
  if (a) {
    a.track(
      'translation_sidebar:update_active_locales',
      props || {},
      withTypewriterContext(options),
      callback
    );
  }
}

const clientAPI = {
  /**
   * Updates the run-time configuration of this Typewriter client.
   *
   * @param {TypewriterOptions} options - the options to upsert
   *
   * @typedef {Object} TypewriterOptions
   * @property {Segment.AnalyticsJS} [analytics] - Underlying analytics instance where analytics
   * 		calls are forwarded on to. Defaults to window.analytics.
   * @property {Function} [onViolation] - Handler fired when if an event does not match its spec. This handler does not fire in
   * 		production mode, because it requires inlining the full JSON Schema spec for each event in your Tracking Plan. By default,
   * 		it will throw errors if NODE_ENV="test" so that tests will fail if a message does not match the spec. Otherwise, errors
   * 		will be logged to stderr.
   */
  setTypewriterOptions,
  /**
   * Fires a 'Page Viewed' track call.
   *
   * @param {PageViewed} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  pageViewed,
  /**
   * Fires a 'account_dropdown:pending_tasks_fetched' track call.
   *
   * @param {AccountDropdownPendingTasksFetched} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  accountDropdownPendingTasksFetched,
  /**
   * Fires a 'api_key:clipboard_copy' track call.
   *
   * @param {ApiKeyClipboardCopy} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  apiKeyClipboardCopy,
  /**
   * Fires a 'app_management:created' track call.
   *
   * @param {AppManagementCreated} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  appManagementCreated,
  /**
   * Fires a 'app_management:updated' track call.
   *
   * @param {AppManagementUpdated} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  appManagementUpdated,
  /**
   * Fires a 'apps:lifecycle_event' track call.
   *
   * @param {AppsLifecycleEvent} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  appsLifecycleEvent,
  /**
   * Fires a 'asset_created' track call.
   *
   * @param {AssetCreated} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  assetCreated,
  /**
   * Fires a 'asset_list:add_asset_multiple' track call.
   *
   * @param {AssetListAddAssetMultiple} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  assetListAddAssetMultiple,
  /**
   * Fires a 'asset_list:add_asset_single' track call.
   *
   * @param {AssetListAddAssetSingle} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  assetListAddAssetSingle,
  /**
   * Fires a 'asset_published' track call.
   *
   * @param {AssetPublished} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  assetPublished,
  /**
   * Fires a 'bulk_editor:close' track call.
   *
   * @param {BulkEditorClose} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  bulkEditorClose,
  /**
   * Fires a 'bulk_editor:edit_in_entry_editor' track call.
   *
   * @param {BulkEditorEditInEntryEditor} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  bulkEditorEditInEntryEditor,
  /**
   * Fires a 'bulk_editor:open' track call.
   *
   * @param {BulkEditorOpen} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  bulkEditorOpen,
  /**
   * Fires a 'bulk_editor:open_slide_in' track call.
   *
   * @param {BulkEditorOpenSlideIn} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  bulkEditorOpenSlideIn,
  /**
   * Fires a 'editor_loaded' track call.
   *
   * @param {EditorLoaded} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  editorLoaded,
  /**
   * Fires a 'editor_workbench:tab_open' track call.
   *
   * @param {EditorWorkbenchTabOpen} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  editorWorkbenchTabOpen,
  /**
   * Fires a 'element:click' track call.
   *
   * @param {ElementClick} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  elementClick,
  /**
   * Fires a 'entity_editor:edit_conflict' track call.
   *
   * @param {EntityEditorEditConflict} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  entityEditorEditConflict,
  /**
   * Fires a 'entry:create' track call.
   *
   * @param {EntryCreate} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  entryCreate,
  /**
   * Fires a 'entry:publish' track call.
   *
   * @param {EntryPublish} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  entryPublish,
  /**
   * Fires a 'entry_editor:view' track call.
   *
   * @param {EntryEditorView} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  entryEditorView,
  /**
   * Fires a 'entry_references:dialog_open' track call.
   *
   * @param {EntryReferencesDialogOpen} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  entryReferencesDialogOpen,
  /**
   * Fires a 'entry_references:publish' track call.
   *
   * @param {EntryReferencesPublish} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  entryReferencesPublish,
  /**
   * Fires a 'entry_references:validate' track call.
   *
   * @param {EntryReferencesValidate} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  entryReferencesValidate,
  /**
   * Fires a 'feature_reference_action' track call.
   *
   * @param {Record<string, any>} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  featureReferenceAction,
  /**
   * Fires a 'global:app_loaded' track call.
   *
   * @param {GlobalAppLoaded} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  globalAppLoaded,
  /**
   * Fires a 'global:dialog' track call.
   *
   * @param {GlobalDialog} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  globalDialog,
  /**
   * Fires a 'global:space_changed' track call.
   *
   * @param {GlobalSpaceChanged} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  globalSpaceChanged,
  /**
   * Fires a 'global:space_left' track call.
   *
   * @param {GlobalSpaceLeft} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  globalSpaceLeft,
  /**
   * Fires a 'global:state_changed' track call.
   *
   * @param {GlobalStateChanged} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  globalStateChanged,
  /**
   * Fires a 'incoming_links:dialog_confirm' track call.
   *
   * @param {IncomingLinksDialogConfirm} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  incomingLinksDialogConfirm,
  /**
   * Fires a 'incoming_links:dialog_open' track call.
   *
   * @param {IncomingLinksDialogOpen} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  incomingLinksDialogOpen,
  /**
   * Fires a 'incoming_links:query' track call.
   *
   * @param {IncomingLinksQuery} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  incomingLinksQuery,
  /**
   * Fires a 'jobs:cancel' track call.
   *
   * @param {JobsCancel} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  jobsCancel,
  /**
   * Fires a 'jobs:create' track call.
   *
   * @param {JobsCreate} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  jobsCreate,
  /**
   * Fires a 'perf:dom_content_loaded' track call.
   *
   * @param {PerfDomContentLoaded} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  perfDomContentLoaded,
  /**
   * Fires a 'perf:first_contentful_paint' track call.
   *
   * @param {PerfFirstContentfulPaint} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  perfFirstContentfulPaint,
  /**
   * Fires a 'perf:time_to_interactive' track call.
   *
   * @param {PerfTimeToInteractive} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  perfTimeToInteractive,
  /**
   * Fires a 'personal_access_token:action' track call.
   *
   * @param {PersonalAccessTokenAction} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  personalAccessTokenAction,
  /**
   * Fires a 'release_created' track call.
   *
   * @param {ReleaseCreated} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releaseCreated,
  /**
   * Fires a 'release_dialog_box' track call.
   *
   * @param {ReleaseDialogBox} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releaseDialogBox,
  /**
   * Fires a 'release_entity_added' track call.
   *
   * @param {ReleaseEntityAdded} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releaseEntityAdded,
  /**
   * Fires a 'release_entity_removed' track call.
   *
   * @param {ReleaseEntityRemoved} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releaseEntityRemoved,
  /**
   * Fires a 'release_published' track call.
   *
   * @param {ReleasePublished} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releasePublished,
  /**
   * Fires a 'release_schedule_canceled' track call.
   *
   * @param {ReleaseScheduleCanceled} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releaseScheduleCanceled,
  /**
   * Fires a 'release_schedule_created' track call.
   *
   * @param {ReleaseScheduleCreated} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releaseScheduleCreated,
  /**
   * Fires a 'release_trashed' track call.
   *
   * @param {ReleaseTrashed} props - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  releaseTrashed,
  /**
   * Fires a 'search:entry_clicked' track call.
   *
   * @param {SearchEntryClicked} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchEntryClicked,
  /**
   * Fires a 'search:filter_added' track call.
   *
   * @param {SearchFilterAdded} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchFilterAdded,
  /**
   * Fires a 'search:filter_removed' track call.
   *
   * @param {SearchFilterRemoved} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchFilterRemoved,
  /**
   * Fires a 'search:query_changed' track call.
   *
   * @param {SearchQueryChanged} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchQueryChanged,
  /**
   * Fires a 'search:search_performed' track call.
   *
   * @param {SearchSearchPerformed} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchSearchPerformed,
  /**
   * Fires a 'search:view_created' track call.
   *
   * @param {SearchViewCreated} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchViewCreated,
  /**
   * Fires a 'search:view_deleted' track call.
   *
   * @param {SearchViewDeleted} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchViewDeleted,
  /**
   * Fires a 'search:view_loaded' track call.
   *
   * @param {SearchViewLoaded} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  searchViewLoaded,
  /**
   * Fires a 'sharejs:cma_entity_version_mismatch' track call.
   *
   * @param {SharejsCmaEntityVersionMismatch} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  sharejsCmaEntityVersionMismatch,
  /**
   * Fires a 'slide_in_editor:arrow_back' track call.
   *
   * @param {SlideInEditorArrowBack} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  slideInEditorArrowBack,
  /**
   * Fires a 'slide_in_editor:delete' track call.
   *
   * @param {SlideInEditorDelete} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  slideInEditorDelete,
  /**
   * Fires a 'slide_in_editor:open' track call.
   *
   * @param {SlideInEditorOpen} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  slideInEditorOpen,
  /**
   * Fires a 'slide_in_editor:open_create' track call.
   *
   * @param {SlideInEditorOpenCreate} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  slideInEditorOpenCreate,
  /**
   * Fires a 'slide_in_editor:peek_click' track call.
   *
   * @param {SlideInEditorPeekClick} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  slideInEditorPeekClick,
  /**
   * Fires a 'space:create' track call.
   *
   * @param {SpaceCreate} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceCreate,
  /**
   * Fires a 'space_wizard:cancel' track call.
   *
   * @param {SpaceWizardCancel} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardCancel,
  /**
   * Fires a 'space_wizard:confirm' track call.
   *
   * @param {SpaceWizardConfirm} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardConfirm,
  /**
   * Fires a 'space_wizard:entered_details' track call.
   *
   * @param {SpaceWizardEnteredDetails} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardEnteredDetails,
  /**
   * Fires a 'space_wizard:link_click' track call.
   *
   * @param {SpaceWizardLinkClick} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardLinkClick,
  /**
   * Fires a 'space_wizard:navigate' track call.
   *
   * @param {SpaceWizardNavigate} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardNavigate,
  /**
   * Fires a 'space_wizard:open' track call.
   *
   * @param {SpaceWizardOpen} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardOpen,
  /**
   * Fires a 'space_wizard:select_plan' track call.
   *
   * @param {SpaceWizardSelectPlan} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardSelectPlan,
  /**
   * Fires a 'space_wizard:space_create' track call.
   *
   * @param {SpaceWizardSpaceCreate} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardSpaceCreate,
  /**
   * Fires a 'space_wizard:space_type_change' track call.
   *
   * @param {SpaceWizardSpaceTypeChange} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  spaceWizardSpaceTypeChange,
  /**
   * Fires a 'teams_in_space:users_added' track call.
   *
   * @param {TeamsInSpaceUsersAdded} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  teamsInSpaceUsersAdded,
  /**
   * Fires a 'text_editor:action' track call.
   *
   * @param {TextEditorAction} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  textEditorAction,
  /**
   * Fires a 'tracking:invalid_event' track call.
   *
   * @param {TrackingInvalidEvent} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  trackingInvalidEvent,
  /**
   * Fires a 'translation_sidebar:change_focused_locale' track call.
   *
   * @param {TranslationSidebarChangeFocusedLocale} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  translationSidebarChangeFocusedLocale,
  /**
   * Fires a 'translation_sidebar:deselect_active_locale' track call.
   *
   * @param {TranslationSidebarDeselectActiveLocale} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  translationSidebarDeselectActiveLocale,
  /**
   * Fires a 'translation_sidebar:toggle_widget_mode' track call.
   *
   * @param {TranslationSidebarToggleWidgetMode} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  translationSidebarToggleWidgetMode,
  /**
   * Fires a 'translation_sidebar:update_active_locales' track call.
   *
   * @param {TranslationSidebarUpdateActiveLocales} [props] - The analytics properties that will be sent to Segment.
   * @param {Object} [options] - A dictionary of options. For example, enable or disable specific destinations for the call.
   * @param {Function} [callback] - An optional callback called after a short timeout after the analytics
   * 		call is fired.
   */
  translationSidebarUpdateActiveLocales,
};

export default new Proxy<typeof clientAPI>(clientAPI, {
  get(target, method) {
    if (typeof method === 'string' && target.hasOwnProperty(method)) {
      return target[method as keyof typeof clientAPI];
    }

    return () => {
      console.warn(`⚠️  You made an analytics call (${String(method)}) that can't be found. Either:
    a) Re-generate your typewriter client: \`npx typewriter\`
    b) Add it to your Tracking Plan: https://app.segment.com/contentful/protocols/tracking-plans/rs_1crHn74jVn5FkduxG4nRt1sNwO9`);
      const a = analytics();
      if (a) {
        a.track(
          'Unknown Analytics Call Fired',
          {
            method,
          },
          withTypewriterContext()
        );
      }
    };
  },
});
