/**
 * @description This is a webpack configuration to process _most_ of the JS files.
 * For example, `templates.js` is created by gulp, as well as all styles.
 *
 * Currently, only one loader is used – pegjs (https://github.com/eploko/pegjs-loader),
 * because of the way our tests are set up – we can import es6 files directly, using
 * `import` syntax, and if imported file uses non-js loader, karma will fail.
 *
 * Hence, styles and templates (written using Jade/Pug) use gulp for processing.
 * However, you can still use custom loader, just avoid requiring non-js files
 * in generic files (otherwise some tests can file).
 *
 * Right now we don't use imports/exports feature of webpack, we just concatenating
 * everything, and use SystemJS to register ES6 dependencies.
 */

const webpack = require('webpack');
const globSync = require('glob').sync;
const P = require('path');
const { createBabelOptions } = require('./app-babel-options');

/**
 * @description webpack's configuration factory
 * @param {boolean} params.dev – if dev is false:
 *   - process.env.NODE_ENV is set to "production"
 *   - we omit moment.js' locales
 *   - global variable IS_PRODUCTION is set to `true`
 *   - source-map is slower, but more extensive
 */
module.exports = ({ dev = false } = {}) => ({
  entry: {
    // we have 3 entries mostly due to historical reasons and to avoid
    // rewriting how our gulp build process is made
    'public/app/components.js': ['./src/javascripts/prelude.js'].concat(
      // we have to get all JS files, because we use Angular DI system
      // and don't import other files directly
      //
      // with globSync, we inline all javascript file names into an array
      // it has two consequences:
      // 1. if we add new file, it is not automatically picked up by webpack
      // (unless we import it normal way, but we don't do that)
      // 2. if you remove an existing file, webpack will break – you are not
      // supposed to remove entry files
      globSync('./src/javascripts/**/*.js', {
        ignore: ['./src/javascripts/libs/*.js', './src/javascripts/prelude.js']
      })
    ),
    'public/app/libs.js': './src/javascripts/libs',
    // some of the vendor files provide some sort of shims
    // the reason – in some files we rely on globals, which is not really
    // how webpack was designed :)
    'public/app/vendor.js': [
      './vendor/jquery-shim.js',
      // Custom jQuery UI build: see the file for version and contents
      './vendor/jquery-ui/jquery-ui.js',
      './node_modules/jquery-textrange/jquery-textrange.js',
      './node_modules/angular/angular.js',
      './node_modules/angular-animate/angular-animate.js',
      './node_modules/angular-load/angular-load.js',
      './node_modules/angular-sanitize/angular-sanitize.js',
      './node_modules/angular-ui-sortable/dist/sortable.js',
      './node_modules/angular-ui-router/release/angular-ui-router.js',
      './node_modules/bootstrap/js/tooltip.js',
      './vendor/bcsocket-shim.js',

      // shareJS part, generated by gulp task
      './public/app/sharejs.js'
    ]
  },
  output: {
    filename: '[name]',
    path: P.resolve(__dirname, '..'),
    publicPath: '/app/'
  },
  module: {
    // sharejs is build by `js/vendor/sharejs` gulp task, so we don't touch it here
    noParse: filename => /sharejs/.test(filename),
    rules: [
      // this rule is only for ES6 files, we need to use SystemJS plugin to register them
      // and resolve "imported" files correctly (they are transpiled to use Angular DI, so
      // these are not real `import/export`).
      {
        test: /\.es6.js$/,
        exclude: /(node_modules|vendor|packages)/,
        use: {
          loader: 'babel-loader',
          options: createBabelOptions()
        }
      },
      // normal es5 files don't have to be wrapped into SystemJS wrapper
      // it means that imports/exports are not mangled, and if you use them, they will
      // work properly
      {
        // we need to process only es5 files, so pure regex would be too complicated
        test: function (path) {
          // explicitly avoid es6 files
          if (/\.es6.js$/.test(path)) {
            return false;
          }

          return /\.js$/.test(path);
        },
        exclude: /(node_modules|vendor|packages)/,
        use: {
          loader: 'babel-loader',
          options: createBabelOptions({
            moduleIds: false,
            getModuleId: undefined,
            // we don't need SystemJS plugin for regular es5 files
            plugins: ['transform-object-rest-spread']
          })
        }
      },
      {
        test: /\.pegjs$/,
        loader: 'pegjs-loader'
      }
    ]
  },
  plugins: [
    new webpack.DefinePlugin({
      // variable to detect which environment we are in
      IS_PRODUCTION: !dev,
      // a lot of libraries rely on this env variable in order to cut warnings, checks,
      // development features, etc. e.g. for react: https://reactjs.org/docs/optimizing-performance.html#webpack
      'process.env.NODE_ENV': dev ? JSON.stringify('dev') : JSON.stringify('production')
    })
  ].concat(
    dev
      ? []
      : [
          // moment.js by default bundles all locales, we want to remove them
          // https://github.com/jmblog/how-to-optimize-momentjs-with-webpack
          // or just google `moment webpack locales`
          new webpack.IgnorePlugin(/^\.\/locale$/, /moment$/)

          // we minify all JS files after concatenation in `build/js` gulp task
          // so we don't need to uglify it here
          // new UglifyJsPlugin({ sourceMap: true })
        ]
  ),
  devtool: dev ? 'eval-source-map' : 'source-map',
  stats: {
    // Set the maximum number of modules to be shown
    maxModules: 1
  }
});
